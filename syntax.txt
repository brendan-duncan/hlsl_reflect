// Syntax rules for HLSL.
// HLSL does not have a formal specification so this is being derived from the documentation.
// I'm using the following notation
// (x)? means zero or one x
// (x)* means zero or more x
// (x)+ means one or more x
// (x,y,...)| means x, or y

Hlsl:
  (TopLevelStatement)+

Identifier:
  (a-zA-Z_)(a-zA-Z0-9_)*

TopLevelStatement:
  (Attributes)? Struct ;
  (Attributes)? CBuffer ;
  (Attributes)? TBuffer ;
  (Attributes)? Variable ;
  (Attributes)? Function ;
  (Attributes)? Typedef ;

Attributes:
  [ Attribute (, Attribute)? ] (Attributes)?

IdentifierList:
  Identifier (, IdentifierList)?

Attribute:
  Identifier
  Identifier ( Expression (, Expression)* )

BaseType:
  Identifier

StorageClass:
  Identifier

TypeModifier:
  Identifier

Type:
  (StorageClass)? (TypeModifier)? BaseType (< TYPE, INT_LITERAL (, INT_LITERAL)?) >)?

Typedef:
  Type Identifier

Variable:
  Type Identifier ([ ExpressionList ])? (= Expression)?

Variable:
  Type Name ([ ExpressionList ])? (: Semantic)? (: Packoffset)? (: Register)? (Annotations)? (= Expression)?

ExpressionList:
  Expression (, ExpressionList)?

Struct:
  STRUCT Identifier { (Field;)+ };

Field:
  Type MemberName;

CBuffer:
  CBUFFER Identifier { (Field;)+ }

TBuffer:
  TBUFFER Identifier { (Field;)+ }

Function:
  Type Identifier ( Parameters ) BlockStatement

BlockStatement:
  { (Statement;)* }

Statement:
  If ;
  Switch ;
  For ;
  DoWhile ;
  While ;
  BlockStatment ;
  Return ;
  BREAK ;
  CONTINUE ;
  DISCARD ;
  Variable ;
  Assignment ;
  Expression ;

If:
  IF ( Expression ) Statement

Switch:
  SWITCH ( Expression ) { (SwitchCase)+ }

SwitchCase:
  CASE Condition : (Statement)?
  DEFAULT : (Statement)?

For:
  FOR ( ExpressionList ; Expression ; ExpressionList ) Statement

DoWhile:
  DO { (Statement)* } WHILE ( Expression )

While:
  WHILE ( Expression ) Statement

Return:
  RETURN Expression

Assignment:
  Identifier ([ ExpressionList ])? = Expression

Expression:
  LogicalOrExpression

TernaryExpr:
  Expression ? Expression : Expression

LogicalOrExpression:
  LogicalAndExpression (|| LogicalAndExpression)*

LogicalAndExpression:
  InclusiveOrExpression (&& InclusiveOrExpression)*

InclusiveOrExpression:
  ExclusiveOrExpression (| ExclusiveOrExpression)*

ExclusiveOrExpression:
  AndExpression (^ AndExpression)*

AndExpression:
  EqualityExpression (& EqualityExpression)*

EqualityExpression:
  RelationalExpression ((==, !=)| RelationalExpression)*

RelationalExpression:
  ShiftExpression ((>, <, >=, <=)| ShiftExpression)*

ShiftExpression:
  AdditiveExpression ((>>, <<)| AdditiveExpression)*

AdditiveExpression:
  MultiplicativeExpression ((+, -)| MultiplicativeExpression)*

MultiplicativeExpression:
  PrefixExpression ((*, /, %) PrefixExpression)*

PrefixExpression:
  (-, !, ~,++,--)| PrefixExpression
  SingularExpression

SingularExpression:
  PrimaryExpression (PostfixExpression)?

PostfixExpression:
  ++
  --
  [ LogicalOrExpression ] (PostfixExpression)?
  . PostfixExpression

PrimaryExpression:
  Identifier ( ArgumentList )
  IntLiteral
  FloatLiteral
  BoolLiteral
  ( Expression )
  BaseType ( Expression )

ArgumentList:
  Expression (, Expression)*
