// Generated by tools/gen_token_type.py
#include "base_type.h"

#include <map>

#include "../token_type.h"

namespace hlsl {

static const std::map<TokenType, BaseType> _tokenTypeToBaseType{
  {TokenType::Undefined, BaseType::Undefined},
  {TokenType::Void, BaseType::Void},
  {TokenType::Float, BaseType::Float},
  {TokenType::Half, BaseType::Half},
  {TokenType::Int, BaseType::Int},
  {TokenType::Uint, BaseType::Uint},
  {TokenType::Bool, BaseType::Bool},
  {TokenType::Min10float, BaseType::Min10float},
  {TokenType::Min16float, BaseType::Min16float},
  {TokenType::Min12int, BaseType::Min12int},
  {TokenType::Min16int, BaseType::Min16int},
  {TokenType::Min16uint, BaseType::Min16uint},
  {TokenType::Vector, BaseType::Vector},
  {TokenType::Matrix, BaseType::Matrix},
  {TokenType::RWBuffer, BaseType::RWBuffer},
  {TokenType::RWByteAddressBuffer, BaseType::RWByteAddressBuffer},
  {TokenType::RWStructuredBuffer, BaseType::RWStructuredBuffer},
  {TokenType::RWTexture1D, BaseType::RWTexture1D},
  {TokenType::RWTexture1DArray, BaseType::RWTexture1DArray},
  {TokenType::RWTexture2D, BaseType::RWTexture2D},
  {TokenType::RWTexture2DArray, BaseType::RWTexture2DArray},
  {TokenType::RWTexture3D, BaseType::RWTexture3D},
  {TokenType::Texture, BaseType::Texture},
  {TokenType::Texture1D, BaseType::Texture1D},
  {TokenType::Texture1D_float, BaseType::Texture1D_float},
  {TokenType::Texture1DArray, BaseType::Texture1DArray},
  {TokenType::Texture2D, BaseType::Texture2D},
  {TokenType::Texture2D_float, BaseType::Texture2D_float},
  {TokenType::Texture2DArray, BaseType::Texture2DArray},
  {TokenType::Texture2DMS, BaseType::Texture2DMS},
  {TokenType::Texture2DMS_float, BaseType::Texture2DMS_float},
  {TokenType::Texture2DMSArray, BaseType::Texture2DMSArray},
  {TokenType::Texture3D, BaseType::Texture3D},
  {TokenType::Texture3D_float, BaseType::Texture3D_float},
  {TokenType::TextureCube, BaseType::TextureCube},
  {TokenType::TextureCube_float, BaseType::TextureCube_float},
  {TokenType::TextureCubeArray, BaseType::TextureCubeArray},
  {TokenType::Sampler, BaseType::Sampler},
  {TokenType::SamplerCUBE, BaseType::SamplerCUBE},
  {TokenType::SamplerCUBE_float, BaseType::SamplerCUBE_float},
  {TokenType::Sampler2D, BaseType::Sampler2D},
  {TokenType::Sampler2D_float, BaseType::Sampler2D_float},
  {TokenType::SamplerState, BaseType::SamplerState},
  {TokenType::SamplerComparisonState, BaseType::SamplerComparisonState},
  {TokenType::Struct, BaseType::Struct},
  {TokenType::StructuredBuffer, BaseType::StructuredBuffer},
  {TokenType::Expression, BaseType::Expression},
  {TokenType::UserDefined, BaseType::UserDefined},
  {TokenType::Float1, BaseType::Float1},
  {TokenType::Float1x1, BaseType::Float1x1},
  {TokenType::Float1x2, BaseType::Float1x2},
  {TokenType::Float1x3, BaseType::Float1x3},
  {TokenType::Float1x4, BaseType::Float1x4},
  {TokenType::Float2, BaseType::Float2},
  {TokenType::Float2x1, BaseType::Float2x1},
  {TokenType::Float2x2, BaseType::Float2x2},
  {TokenType::Float2x3, BaseType::Float2x3},
  {TokenType::Float2x4, BaseType::Float2x4},
  {TokenType::Float3, BaseType::Float3},
  {TokenType::Float3x1, BaseType::Float3x1},
  {TokenType::Float3x2, BaseType::Float3x2},
  {TokenType::Float3x3, BaseType::Float3x3},
  {TokenType::Float3x4, BaseType::Float3x4},
  {TokenType::Float4, BaseType::Float4},
  {TokenType::Float4x1, BaseType::Float4x1},
  {TokenType::Float4x2, BaseType::Float4x2},
  {TokenType::Float4x3, BaseType::Float4x3},
  {TokenType::Float4x4, BaseType::Float4x4},
  {TokenType::Half1, BaseType::Half1},
  {TokenType::Half1x1, BaseType::Half1x1},
  {TokenType::Half1x2, BaseType::Half1x2},
  {TokenType::Half1x3, BaseType::Half1x3},
  {TokenType::Half1x4, BaseType::Half1x4},
  {TokenType::Half2, BaseType::Half2},
  {TokenType::Half2x1, BaseType::Half2x1},
  {TokenType::Half2x2, BaseType::Half2x2},
  {TokenType::Half2x3, BaseType::Half2x3},
  {TokenType::Half2x4, BaseType::Half2x4},
  {TokenType::Half3, BaseType::Half3},
  {TokenType::Half3x1, BaseType::Half3x1},
  {TokenType::Half3x2, BaseType::Half3x2},
  {TokenType::Half3x3, BaseType::Half3x3},
  {TokenType::Half3x4, BaseType::Half3x4},
  {TokenType::Half4, BaseType::Half4},
  {TokenType::Half4x1, BaseType::Half4x1},
  {TokenType::Half4x2, BaseType::Half4x2},
  {TokenType::Half4x3, BaseType::Half4x3},
  {TokenType::Half4x4, BaseType::Half4x4},
  {TokenType::Int1, BaseType::Int1},
  {TokenType::Int1x1, BaseType::Int1x1},
  {TokenType::Int1x2, BaseType::Int1x2},
  {TokenType::Int1x3, BaseType::Int1x3},
  {TokenType::Int1x4, BaseType::Int1x4},
  {TokenType::Int2, BaseType::Int2},
  {TokenType::Int2x1, BaseType::Int2x1},
  {TokenType::Int2x2, BaseType::Int2x2},
  {TokenType::Int2x3, BaseType::Int2x3},
  {TokenType::Int2x4, BaseType::Int2x4},
  {TokenType::Int3, BaseType::Int3},
  {TokenType::Int3x1, BaseType::Int3x1},
  {TokenType::Int3x2, BaseType::Int3x2},
  {TokenType::Int3x3, BaseType::Int3x3},
  {TokenType::Int3x4, BaseType::Int3x4},
  {TokenType::Int4, BaseType::Int4},
  {TokenType::Int4x1, BaseType::Int4x1},
  {TokenType::Int4x2, BaseType::Int4x2},
  {TokenType::Int4x3, BaseType::Int4x3},
  {TokenType::Int4x4, BaseType::Int4x4},
  {TokenType::Uint1, BaseType::Uint1},
  {TokenType::Uint1x1, BaseType::Uint1x1},
  {TokenType::Uint1x2, BaseType::Uint1x2},
  {TokenType::Uint1x3, BaseType::Uint1x3},
  {TokenType::Uint1x4, BaseType::Uint1x4},
  {TokenType::Uint2, BaseType::Uint2},
  {TokenType::Uint2x1, BaseType::Uint2x1},
  {TokenType::Uint2x2, BaseType::Uint2x2},
  {TokenType::Uint2x3, BaseType::Uint2x3},
  {TokenType::Uint2x4, BaseType::Uint2x4},
  {TokenType::Uint3, BaseType::Uint3},
  {TokenType::Uint3x1, BaseType::Uint3x1},
  {TokenType::Uint3x2, BaseType::Uint3x2},
  {TokenType::Uint3x3, BaseType::Uint3x3},
  {TokenType::Uint3x4, BaseType::Uint3x4},
  {TokenType::Uint4, BaseType::Uint4},
  {TokenType::Uint4x1, BaseType::Uint4x1},
  {TokenType::Uint4x2, BaseType::Uint4x2},
  {TokenType::Uint4x3, BaseType::Uint4x3},
  {TokenType::Uint4x4, BaseType::Uint4x4},
  {TokenType::Bool1, BaseType::Bool1},
  {TokenType::Bool1x1, BaseType::Bool1x1},
  {TokenType::Bool1x2, BaseType::Bool1x2},
  {TokenType::Bool1x3, BaseType::Bool1x3},
  {TokenType::Bool1x4, BaseType::Bool1x4},
  {TokenType::Bool2, BaseType::Bool2},
  {TokenType::Bool2x1, BaseType::Bool2x1},
  {TokenType::Bool2x2, BaseType::Bool2x2},
  {TokenType::Bool2x3, BaseType::Bool2x3},
  {TokenType::Bool2x4, BaseType::Bool2x4},
  {TokenType::Bool3, BaseType::Bool3},
  {TokenType::Bool3x1, BaseType::Bool3x1},
  {TokenType::Bool3x2, BaseType::Bool3x2},
  {TokenType::Bool3x3, BaseType::Bool3x3},
  {TokenType::Bool3x4, BaseType::Bool3x4},
  {TokenType::Bool4, BaseType::Bool4},
  {TokenType::Bool4x1, BaseType::Bool4x1},
  {TokenType::Bool4x2, BaseType::Bool4x2},
  {TokenType::Bool4x3, BaseType::Bool4x3},
  {TokenType::Bool4x4, BaseType::Bool4x4},
  {TokenType::Min10float1, BaseType::Min10float1},
  {TokenType::Min10float1x1, BaseType::Min10float1x1},
  {TokenType::Min10float1x2, BaseType::Min10float1x2},
  {TokenType::Min10float1x3, BaseType::Min10float1x3},
  {TokenType::Min10float1x4, BaseType::Min10float1x4},
  {TokenType::Min10float2, BaseType::Min10float2},
  {TokenType::Min10float2x1, BaseType::Min10float2x1},
  {TokenType::Min10float2x2, BaseType::Min10float2x2},
  {TokenType::Min10float2x3, BaseType::Min10float2x3},
  {TokenType::Min10float2x4, BaseType::Min10float2x4},
  {TokenType::Min10float3, BaseType::Min10float3},
  {TokenType::Min10float3x1, BaseType::Min10float3x1},
  {TokenType::Min10float3x2, BaseType::Min10float3x2},
  {TokenType::Min10float3x3, BaseType::Min10float3x3},
  {TokenType::Min10float3x4, BaseType::Min10float3x4},
  {TokenType::Min10float4, BaseType::Min10float4},
  {TokenType::Min10float4x1, BaseType::Min10float4x1},
  {TokenType::Min10float4x2, BaseType::Min10float4x2},
  {TokenType::Min10float4x3, BaseType::Min10float4x3},
  {TokenType::Min10float4x4, BaseType::Min10float4x4},
  {TokenType::Min16float1, BaseType::Min16float1},
  {TokenType::Min16float1x1, BaseType::Min16float1x1},
  {TokenType::Min16float1x2, BaseType::Min16float1x2},
  {TokenType::Min16float1x3, BaseType::Min16float1x3},
  {TokenType::Min16float1x4, BaseType::Min16float1x4},
  {TokenType::Min16float2, BaseType::Min16float2},
  {TokenType::Min16float2x1, BaseType::Min16float2x1},
  {TokenType::Min16float2x2, BaseType::Min16float2x2},
  {TokenType::Min16float2x3, BaseType::Min16float2x3},
  {TokenType::Min16float2x4, BaseType::Min16float2x4},
  {TokenType::Min16float3, BaseType::Min16float3},
  {TokenType::Min16float3x1, BaseType::Min16float3x1},
  {TokenType::Min16float3x2, BaseType::Min16float3x2},
  {TokenType::Min16float3x3, BaseType::Min16float3x3},
  {TokenType::Min16float3x4, BaseType::Min16float3x4},
  {TokenType::Min16float4, BaseType::Min16float4},
  {TokenType::Min16float4x1, BaseType::Min16float4x1},
  {TokenType::Min16float4x2, BaseType::Min16float4x2},
  {TokenType::Min16float4x3, BaseType::Min16float4x3},
  {TokenType::Min16float4x4, BaseType::Min16float4x4},
  {TokenType::Min12int1, BaseType::Min12int1},
  {TokenType::Min12int1x1, BaseType::Min12int1x1},
  {TokenType::Min12int1x2, BaseType::Min12int1x2},
  {TokenType::Min12int1x3, BaseType::Min12int1x3},
  {TokenType::Min12int1x4, BaseType::Min12int1x4},
  {TokenType::Min12int2, BaseType::Min12int2},
  {TokenType::Min12int2x1, BaseType::Min12int2x1},
  {TokenType::Min12int2x2, BaseType::Min12int2x2},
  {TokenType::Min12int2x3, BaseType::Min12int2x3},
  {TokenType::Min12int2x4, BaseType::Min12int2x4},
  {TokenType::Min12int3, BaseType::Min12int3},
  {TokenType::Min12int3x1, BaseType::Min12int3x1},
  {TokenType::Min12int3x2, BaseType::Min12int3x2},
  {TokenType::Min12int3x3, BaseType::Min12int3x3},
  {TokenType::Min12int3x4, BaseType::Min12int3x4},
  {TokenType::Min12int4, BaseType::Min12int4},
  {TokenType::Min12int4x1, BaseType::Min12int4x1},
  {TokenType::Min12int4x2, BaseType::Min12int4x2},
  {TokenType::Min12int4x3, BaseType::Min12int4x3},
  {TokenType::Min12int4x4, BaseType::Min12int4x4},
  {TokenType::Min16int1, BaseType::Min16int1},
  {TokenType::Min16int1x1, BaseType::Min16int1x1},
  {TokenType::Min16int1x2, BaseType::Min16int1x2},
  {TokenType::Min16int1x3, BaseType::Min16int1x3},
  {TokenType::Min16int1x4, BaseType::Min16int1x4},
  {TokenType::Min16int2, BaseType::Min16int2},
  {TokenType::Min16int2x1, BaseType::Min16int2x1},
  {TokenType::Min16int2x2, BaseType::Min16int2x2},
  {TokenType::Min16int2x3, BaseType::Min16int2x3},
  {TokenType::Min16int2x4, BaseType::Min16int2x4},
  {TokenType::Min16int3, BaseType::Min16int3},
  {TokenType::Min16int3x1, BaseType::Min16int3x1},
  {TokenType::Min16int3x2, BaseType::Min16int3x2},
  {TokenType::Min16int3x3, BaseType::Min16int3x3},
  {TokenType::Min16int3x4, BaseType::Min16int3x4},
  {TokenType::Min16int4, BaseType::Min16int4},
  {TokenType::Min16int4x1, BaseType::Min16int4x1},
  {TokenType::Min16int4x2, BaseType::Min16int4x2},
  {TokenType::Min16int4x3, BaseType::Min16int4x3},
  {TokenType::Min16int4x4, BaseType::Min16int4x4},
  {TokenType::Min16uint1, BaseType::Min16uint1},
  {TokenType::Min16uint1x1, BaseType::Min16uint1x1},
  {TokenType::Min16uint1x2, BaseType::Min16uint1x2},
  {TokenType::Min16uint1x3, BaseType::Min16uint1x3},
  {TokenType::Min16uint1x4, BaseType::Min16uint1x4},
  {TokenType::Min16uint2, BaseType::Min16uint2},
  {TokenType::Min16uint2x1, BaseType::Min16uint2x1},
  {TokenType::Min16uint2x2, BaseType::Min16uint2x2},
  {TokenType::Min16uint2x3, BaseType::Min16uint2x3},
  {TokenType::Min16uint2x4, BaseType::Min16uint2x4},
  {TokenType::Min16uint3, BaseType::Min16uint3},
  {TokenType::Min16uint3x1, BaseType::Min16uint3x1},
  {TokenType::Min16uint3x2, BaseType::Min16uint3x2},
  {TokenType::Min16uint3x3, BaseType::Min16uint3x3},
  {TokenType::Min16uint3x4, BaseType::Min16uint3x4},
  {TokenType::Min16uint4, BaseType::Min16uint4},
  {TokenType::Min16uint4x1, BaseType::Min16uint4x1},
  {TokenType::Min16uint4x2, BaseType::Min16uint4x2},
  {TokenType::Min16uint4x3, BaseType::Min16uint4x3},
  {TokenType::Min16uint4x4, BaseType::Min16uint4x4},
};

static const std::map<BaseType, std::string_view> _baseTypeToString{
  {BaseType::Undefined, "undefined"},
  {BaseType::Void, "void"},
  {BaseType::Float, "float"},
  {BaseType::Half, "half"},
  {BaseType::Int, "int"},
  {BaseType::Uint, "uint"},
  {BaseType::Bool, "bool"},
  {BaseType::Min10float, "min10float"},
  {BaseType::Min16float, "min16float"},
  {BaseType::Min12int, "min12int"},
  {BaseType::Min16int, "min16int"},
  {BaseType::Min16uint, "min16uint"},
  {BaseType::Vector, "vector"},
  {BaseType::Matrix, "matrix"},
  {BaseType::RWBuffer, "RWBuffer"},
  {BaseType::RWByteAddressBuffer, "RWByteAddressBuffer"},
  {BaseType::RWStructuredBuffer, "RWStructuredBuffer"},
  {BaseType::RWTexture1D, "RWTexture1D"},
  {BaseType::RWTexture1DArray, "RWTexture1DArray"},
  {BaseType::RWTexture2D, "RWTexture2D"},
  {BaseType::RWTexture2DArray, "RWTexture2DArray"},
  {BaseType::RWTexture3D, "RWTexture3D"},
  {BaseType::Texture, "texture"},
  {BaseType::Texture1D, "Texture1D"},
  {BaseType::Texture1D_float, "Texture1D_float"},
  {BaseType::Texture1DArray, "Texture1DArray"},
  {BaseType::Texture2D, "Texture2D"},
  {BaseType::Texture2D_float, "Texture2D_float"},
  {BaseType::Texture2DArray, "Texture2DArray"},
  {BaseType::Texture2DMS, "Texture2DMS"},
  {BaseType::Texture2DMS_float, "Texture2DMS_float"},
  {BaseType::Texture2DMSArray, "Texture2DMSArray"},
  {BaseType::Texture3D, "Texture3D"},
  {BaseType::Texture3D_float, "Texture3D_float"},
  {BaseType::TextureCube, "TextureCube"},
  {BaseType::TextureCube_float, "TextureCube_float"},
  {BaseType::TextureCubeArray, "TextureCubeArray"},
  {BaseType::Sampler, "sampler"},
  {BaseType::SamplerCUBE, "samplerCUBE"},
  {BaseType::SamplerCUBE_float, "samplerCUBE_float"},
  {BaseType::Sampler2D, "sampler2D"},
  {BaseType::Sampler2D_float, "sampler2D_float"},
  {BaseType::SamplerState, "SamplerState"},
  {BaseType::SamplerComparisonState, "SamplerComparisonState"},
  {BaseType::Struct, "Struct"},
  {BaseType::StructuredBuffer, "StructuredBuffer"},
  {BaseType::Expression, "Expression"},
  {BaseType::UserDefined, "UserDefined"},
  {BaseType::Float1, "float1"},
  {BaseType::Float1x1, "float1x1"},
  {BaseType::Float1x2, "float1x2"},
  {BaseType::Float1x3, "float1x3"},
  {BaseType::Float1x4, "float1x4"},
  {BaseType::Float2, "float2"},
  {BaseType::Float2x1, "float2x1"},
  {BaseType::Float2x2, "float2x2"},
  {BaseType::Float2x3, "float2x3"},
  {BaseType::Float2x4, "float2x4"},
  {BaseType::Float3, "float3"},
  {BaseType::Float3x1, "float3x1"},
  {BaseType::Float3x2, "float3x2"},
  {BaseType::Float3x3, "float3x3"},
  {BaseType::Float3x4, "float3x4"},
  {BaseType::Float4, "float4"},
  {BaseType::Float4x1, "float4x1"},
  {BaseType::Float4x2, "float4x2"},
  {BaseType::Float4x3, "float4x3"},
  {BaseType::Float4x4, "float4x4"},
  {BaseType::Half1, "half1"},
  {BaseType::Half1x1, "half1x1"},
  {BaseType::Half1x2, "half1x2"},
  {BaseType::Half1x3, "half1x3"},
  {BaseType::Half1x4, "half1x4"},
  {BaseType::Half2, "half2"},
  {BaseType::Half2x1, "half2x1"},
  {BaseType::Half2x2, "half2x2"},
  {BaseType::Half2x3, "half2x3"},
  {BaseType::Half2x4, "half2x4"},
  {BaseType::Half3, "half3"},
  {BaseType::Half3x1, "half3x1"},
  {BaseType::Half3x2, "half3x2"},
  {BaseType::Half3x3, "half3x3"},
  {BaseType::Half3x4, "half3x4"},
  {BaseType::Half4, "half4"},
  {BaseType::Half4x1, "half4x1"},
  {BaseType::Half4x2, "half4x2"},
  {BaseType::Half4x3, "half4x3"},
  {BaseType::Half4x4, "half4x4"},
  {BaseType::Int1, "int1"},
  {BaseType::Int1x1, "int1x1"},
  {BaseType::Int1x2, "int1x2"},
  {BaseType::Int1x3, "int1x3"},
  {BaseType::Int1x4, "int1x4"},
  {BaseType::Int2, "int2"},
  {BaseType::Int2x1, "int2x1"},
  {BaseType::Int2x2, "int2x2"},
  {BaseType::Int2x3, "int2x3"},
  {BaseType::Int2x4, "int2x4"},
  {BaseType::Int3, "int3"},
  {BaseType::Int3x1, "int3x1"},
  {BaseType::Int3x2, "int3x2"},
  {BaseType::Int3x3, "int3x3"},
  {BaseType::Int3x4, "int3x4"},
  {BaseType::Int4, "int4"},
  {BaseType::Int4x1, "int4x1"},
  {BaseType::Int4x2, "int4x2"},
  {BaseType::Int4x3, "int4x3"},
  {BaseType::Int4x4, "int4x4"},
  {BaseType::Uint1, "uint1"},
  {BaseType::Uint1x1, "uint1x1"},
  {BaseType::Uint1x2, "uint1x2"},
  {BaseType::Uint1x3, "uint1x3"},
  {BaseType::Uint1x4, "uint1x4"},
  {BaseType::Uint2, "uint2"},
  {BaseType::Uint2x1, "uint2x1"},
  {BaseType::Uint2x2, "uint2x2"},
  {BaseType::Uint2x3, "uint2x3"},
  {BaseType::Uint2x4, "uint2x4"},
  {BaseType::Uint3, "uint3"},
  {BaseType::Uint3x1, "uint3x1"},
  {BaseType::Uint3x2, "uint3x2"},
  {BaseType::Uint3x3, "uint3x3"},
  {BaseType::Uint3x4, "uint3x4"},
  {BaseType::Uint4, "uint4"},
  {BaseType::Uint4x1, "uint4x1"},
  {BaseType::Uint4x2, "uint4x2"},
  {BaseType::Uint4x3, "uint4x3"},
  {BaseType::Uint4x4, "uint4x4"},
  {BaseType::Bool1, "bool1"},
  {BaseType::Bool1x1, "bool1x1"},
  {BaseType::Bool1x2, "bool1x2"},
  {BaseType::Bool1x3, "bool1x3"},
  {BaseType::Bool1x4, "bool1x4"},
  {BaseType::Bool2, "bool2"},
  {BaseType::Bool2x1, "bool2x1"},
  {BaseType::Bool2x2, "bool2x2"},
  {BaseType::Bool2x3, "bool2x3"},
  {BaseType::Bool2x4, "bool2x4"},
  {BaseType::Bool3, "bool3"},
  {BaseType::Bool3x1, "bool3x1"},
  {BaseType::Bool3x2, "bool3x2"},
  {BaseType::Bool3x3, "bool3x3"},
  {BaseType::Bool3x4, "bool3x4"},
  {BaseType::Bool4, "bool4"},
  {BaseType::Bool4x1, "bool4x1"},
  {BaseType::Bool4x2, "bool4x2"},
  {BaseType::Bool4x3, "bool4x3"},
  {BaseType::Bool4x4, "bool4x4"},
  {BaseType::Min10float1, "min10float1"},
  {BaseType::Min10float1x1, "min10float1x1"},
  {BaseType::Min10float1x2, "min10float1x2"},
  {BaseType::Min10float1x3, "min10float1x3"},
  {BaseType::Min10float1x4, "min10float1x4"},
  {BaseType::Min10float2, "min10float2"},
  {BaseType::Min10float2x1, "min10float2x1"},
  {BaseType::Min10float2x2, "min10float2x2"},
  {BaseType::Min10float2x3, "min10float2x3"},
  {BaseType::Min10float2x4, "min10float2x4"},
  {BaseType::Min10float3, "min10float3"},
  {BaseType::Min10float3x1, "min10float3x1"},
  {BaseType::Min10float3x2, "min10float3x2"},
  {BaseType::Min10float3x3, "min10float3x3"},
  {BaseType::Min10float3x4, "min10float3x4"},
  {BaseType::Min10float4, "min10float4"},
  {BaseType::Min10float4x1, "min10float4x1"},
  {BaseType::Min10float4x2, "min10float4x2"},
  {BaseType::Min10float4x3, "min10float4x3"},
  {BaseType::Min10float4x4, "min10float4x4"},
  {BaseType::Min16float1, "min16float1"},
  {BaseType::Min16float1x1, "min16float1x1"},
  {BaseType::Min16float1x2, "min16float1x2"},
  {BaseType::Min16float1x3, "min16float1x3"},
  {BaseType::Min16float1x4, "min16float1x4"},
  {BaseType::Min16float2, "min16float2"},
  {BaseType::Min16float2x1, "min16float2x1"},
  {BaseType::Min16float2x2, "min16float2x2"},
  {BaseType::Min16float2x3, "min16float2x3"},
  {BaseType::Min16float2x4, "min16float2x4"},
  {BaseType::Min16float3, "min16float3"},
  {BaseType::Min16float3x1, "min16float3x1"},
  {BaseType::Min16float3x2, "min16float3x2"},
  {BaseType::Min16float3x3, "min16float3x3"},
  {BaseType::Min16float3x4, "min16float3x4"},
  {BaseType::Min16float4, "min16float4"},
  {BaseType::Min16float4x1, "min16float4x1"},
  {BaseType::Min16float4x2, "min16float4x2"},
  {BaseType::Min16float4x3, "min16float4x3"},
  {BaseType::Min16float4x4, "min16float4x4"},
  {BaseType::Min12int1, "min12int1"},
  {BaseType::Min12int1x1, "min12int1x1"},
  {BaseType::Min12int1x2, "min12int1x2"},
  {BaseType::Min12int1x3, "min12int1x3"},
  {BaseType::Min12int1x4, "min12int1x4"},
  {BaseType::Min12int2, "min12int2"},
  {BaseType::Min12int2x1, "min12int2x1"},
  {BaseType::Min12int2x2, "min12int2x2"},
  {BaseType::Min12int2x3, "min12int2x3"},
  {BaseType::Min12int2x4, "min12int2x4"},
  {BaseType::Min12int3, "min12int3"},
  {BaseType::Min12int3x1, "min12int3x1"},
  {BaseType::Min12int3x2, "min12int3x2"},
  {BaseType::Min12int3x3, "min12int3x3"},
  {BaseType::Min12int3x4, "min12int3x4"},
  {BaseType::Min12int4, "min12int4"},
  {BaseType::Min12int4x1, "min12int4x1"},
  {BaseType::Min12int4x2, "min12int4x2"},
  {BaseType::Min12int4x3, "min12int4x3"},
  {BaseType::Min12int4x4, "min12int4x4"},
  {BaseType::Min16int1, "min16int1"},
  {BaseType::Min16int1x1, "min16int1x1"},
  {BaseType::Min16int1x2, "min16int1x2"},
  {BaseType::Min16int1x3, "min16int1x3"},
  {BaseType::Min16int1x4, "min16int1x4"},
  {BaseType::Min16int2, "min16int2"},
  {BaseType::Min16int2x1, "min16int2x1"},
  {BaseType::Min16int2x2, "min16int2x2"},
  {BaseType::Min16int2x3, "min16int2x3"},
  {BaseType::Min16int2x4, "min16int2x4"},
  {BaseType::Min16int3, "min16int3"},
  {BaseType::Min16int3x1, "min16int3x1"},
  {BaseType::Min16int3x2, "min16int3x2"},
  {BaseType::Min16int3x3, "min16int3x3"},
  {BaseType::Min16int3x4, "min16int3x4"},
  {BaseType::Min16int4, "min16int4"},
  {BaseType::Min16int4x1, "min16int4x1"},
  {BaseType::Min16int4x2, "min16int4x2"},
  {BaseType::Min16int4x3, "min16int4x3"},
  {BaseType::Min16int4x4, "min16int4x4"},
  {BaseType::Min16uint1, "min16uint1"},
  {BaseType::Min16uint1x1, "min16uint1x1"},
  {BaseType::Min16uint1x2, "min16uint1x2"},
  {BaseType::Min16uint1x3, "min16uint1x3"},
  {BaseType::Min16uint1x4, "min16uint1x4"},
  {BaseType::Min16uint2, "min16uint2"},
  {BaseType::Min16uint2x1, "min16uint2x1"},
  {BaseType::Min16uint2x2, "min16uint2x2"},
  {BaseType::Min16uint2x3, "min16uint2x3"},
  {BaseType::Min16uint2x4, "min16uint2x4"},
  {BaseType::Min16uint3, "min16uint3"},
  {BaseType::Min16uint3x1, "min16uint3x1"},
  {BaseType::Min16uint3x2, "min16uint3x2"},
  {BaseType::Min16uint3x3, "min16uint3x3"},
  {BaseType::Min16uint3x4, "min16uint3x4"},
  {BaseType::Min16uint4, "min16uint4"},
  {BaseType::Min16uint4x1, "min16uint4x1"},
  {BaseType::Min16uint4x2, "min16uint4x2"},
  {BaseType::Min16uint4x3, "min16uint4x3"},
  {BaseType::Min16uint4x4, "min16uint4x4"},
};

const std::string_view& baseTypeToString(BaseType t) {
  auto ti = _baseTypeToString.find(t);
  if (ti == _baseTypeToString.end()) {
    static const std::string_view undefined{"Undefined"};
    return undefined;
  }
  return (*ti).second;
}

BaseType tokenTypeToBaseType(TokenType t) {
  auto ti = _tokenTypeToBaseType.find(t);
  if (ti == _tokenTypeToBaseType.end()) {
    return BaseType::Undefined;
  }
  return (*ti).second;
}

} // namespace hlsl
