// Generated by tools/gen_token_type.py
#include <array>
#include <map>
#include <set>
#include <string>
#include <string_view>
#include <variant>

#include "scanner/literal.h"
#include "scanner/template_types.h"
#include "token_type.h"

namespace hlsl {

// Used for diagnostics
static const std::map<TokenType, std::string> _tokenTypeToString{
  {TokenType::Undefined, "Undefined"},
  {TokenType::EndOfFile, "EndOfFile"},
  {TokenType::IntLiteral, "IntLiteral"},
  {TokenType::FloatLiteral, "FloatLiteral"},
  {TokenType::StringLiteral, "StringLiteral"},
  {TokenType::Identifier, "Identifier"},
  {TokenType::LeftParen, "LeftParen"},
  {TokenType::RightParen, "RightParen"},
  {TokenType::LeftBracket, "LeftBracket"},
  {TokenType::RightBracket, "RightBracket"},
  {TokenType::LeftBrace, "LeftBrace"},
  {TokenType::RightBrace, "RightBrace"},
  {TokenType::Underscore, "Underscore"},
  {TokenType::Dot, "Dot"},
  {TokenType::Comma, "Comma"},
  {TokenType::Colon, "Colon"},
  {TokenType::Semicolon, "Semicolon"},
  {TokenType::Plus, "Plus"},
  {TokenType::Minus, "Minus"},
  {TokenType::Star, "Star"},
  {TokenType::Slash, "Slash"},
  {TokenType::Percent, "Percent"},
  {TokenType::Caret, "Caret"},
  {TokenType::Ampersand, "Ampersand"},
  {TokenType::Pipe, "Pipe"},
  {TokenType::Tilde, "Tilde"},
  {TokenType::Bang, "Bang"},
  {TokenType::Equal, "Equal"},
  {TokenType::Less, "Less"},
  {TokenType::Greater, "Greater"},
  {TokenType::PlusEqual, "PlusEqual"},
  {TokenType::MinusEqual, "MinusEqual"},
  {TokenType::StarEqual, "StarEqual"},
  {TokenType::SlashEqual, "SlashEqual"},
  {TokenType::PercentEqual, "PercentEqual"},
  {TokenType::CaretEqual, "CaretEqual"},
  {TokenType::AmpersandEqual, "AmpersandEqual"},
  {TokenType::PipeEqual, "PipeEqual"},
  {TokenType::LessLess, "LessLess"},
  {TokenType::GreaterGreater, "GreaterGreater"},
  {TokenType::LessLessEqual, "LessLessEqual"},
  {TokenType::GreaterGreaterEqual, "GreaterGreaterEqual"},
  {TokenType::EqualEqual, "EqualEqual"},
  {TokenType::BangEqual, "BangEqual"},
  {TokenType::LessEqual, "LessEqual"},
  {TokenType::GreaterEqual, "GreaterEqual"},
  {TokenType::AmpersandAmpersand, "AmpersandAmpersand"},
  {TokenType::PipePipe, "PipePipe"},
  {TokenType::Question, "Question"},
  {TokenType::QuestionQuestion, "QuestionQuestion"},
  {TokenType::PlusPlus, "PlusPlus"},
  {TokenType::MinusMinus, "MinusMinus"},
  {TokenType::Hash, "Hash"},
  {TokenType::AppendStructuredBuffer, "AppendStructuredBuffer"},
  {TokenType::Asm, "Asm"},
  {TokenType::Asm_fragment, "Asm_fragment"},
  {TokenType::BlendState, "BlendState"},
  {TokenType::Bool, "Bool"},
  {TokenType::Break, "Break"},
  {TokenType::Buffer, "Buffer"},
  {TokenType::ByteAddressBuffer, "ByteAddressBuffer"},
  {TokenType::Case, "Case"},
  {TokenType::Cbuffer, "Cbuffer"},
  {TokenType::Centroid, "Centroid"},
  {TokenType::Class, "Class"},
  {TokenType::Column_major, "Column_major"},
  {TokenType::Compile, "Compile"},
  {TokenType::Compile_fragment, "Compile_fragment"},
  {TokenType::CompileShader, "CompileShader"},
  {TokenType::Const, "Const"},
  {TokenType::Continue, "Continue"},
  {TokenType::ComputeShader, "ComputeShader"},
  {TokenType::ConsumeStructuredBuffer, "ConsumeStructuredBuffer"},
  {TokenType::Default, "Default"},
  {TokenType::DepthStencilState, "DepthStencilState"},
  {TokenType::DepthStencilView, "DepthStencilView"},
  {TokenType::Discard, "Discard"},
  {TokenType::Do, "Do"},
  {TokenType::Double, "Double"},
  {TokenType::DomainShader, "DomainShader"},
  {TokenType::Dword, "Dword"},
  {TokenType::Else, "Else"},
  {TokenType::Export, "Export"},
  {TokenType::Extern, "Extern"},
  {TokenType::False, "False"},
  {TokenType::Float, "Float"},
  {TokenType::For, "For"},
  {TokenType::Fxgroup, "Fxgroup"},
  {TokenType::GeometryShader, "GeometryShader"},
  {TokenType::Groupshared, "Groupshared"},
  {TokenType::Half, "Half"},
  {TokenType::Hullshader, "Hullshader"},
  {TokenType::If, "If"},
  {TokenType::In, "In"},
  {TokenType::Inline, "Inline"},
  {TokenType::Inout, "Inout"},
  {TokenType::InputPatch, "InputPatch"},
  {TokenType::Int, "Int"},
  {TokenType::Interface, "Interface"},
  {TokenType::Line, "Line"},
  {TokenType::Lineadj, "Lineadj"},
  {TokenType::Linear, "Linear"},
  {TokenType::LineStream, "LineStream"},
  {TokenType::Matrix, "Matrix"},
  {TokenType::Min16float, "Min16float"},
  {TokenType::Min10float, "Min10float"},
  {TokenType::Min16int, "Min16int"},
  {TokenType::Min12int, "Min12int"},
  {TokenType::Min16uint, "Min16uint"},
  {TokenType::Namespace, "Namespace"},
  {TokenType::Nointerpolation, "Nointerpolation"},
  {TokenType::Noperspective, "Noperspective"},
  {TokenType::Null, "Null"},
  {TokenType::Out, "Out"},
  {TokenType::OutputPatch, "OutputPatch"},
  {TokenType::Packoffset, "Packoffset"},
  {TokenType::Pass, "Pass"},
  {TokenType::Pixelfragment, "Pixelfragment"},
  {TokenType::PixelShader, "PixelShader"},
  {TokenType::Point, "Point"},
  {TokenType::PointStream, "PointStream"},
  {TokenType::Precise, "Precise"},
  {TokenType::RasterizerState, "RasterizerState"},
  {TokenType::RenderTargetView, "RenderTargetView"},
  {TokenType::Return, "Return"},
  {TokenType::Register, "Register"},
  {TokenType::Row_major, "Row_major"},
  {TokenType::RWBuffer, "RWBuffer"},
  {TokenType::RWByteAddressBuffer, "RWByteAddressBuffer"},
  {TokenType::RWStructuredBuffer, "RWStructuredBuffer"},
  {TokenType::RWTexture1D, "RWTexture1D"},
  {TokenType::RWTexture1DArray, "RWTexture1DArray"},
  {TokenType::RWTexture2D, "RWTexture2D"},
  {TokenType::RWTexture2DArray, "RWTexture2DArray"},
  {TokenType::RWTexture3D, "RWTexture3D"},
  {TokenType::Sample, "Sample"},
  {TokenType::Sampler, "Sampler"},
  {TokenType::SamplerCUBE, "SamplerCUBE"},
  {TokenType::SamplerCUBE_float, "SamplerCUBE_float"},
  {TokenType::Sampler2D, "Sampler2D"},
  {TokenType::Sampler2D_float, "Sampler2D_float"},
  {TokenType::SamplerState, "SamplerState"},
  {TokenType::SamplerComparisonState, "SamplerComparisonState"},
  {TokenType::Shared, "Shared"},
  {TokenType::Snorm, "Snorm"},
  {TokenType::Stateblock, "Stateblock"},
  {TokenType::Stateblock_state, "Stateblock_state"},
  {TokenType::Static, "Static"},
  {TokenType::String, "String"},
  {TokenType::Struct, "Struct"},
  {TokenType::Switch, "Switch"},
  {TokenType::StructuredBuffer, "StructuredBuffer"},
  {TokenType::Tbuffer, "Tbuffer"},
  {TokenType::Technique, "Technique"},
  {TokenType::Technique10, "Technique10"},
  {TokenType::Technique11, "Technique11"},
  {TokenType::Texture, "Texture"},
  {TokenType::Texture1D, "Texture1D"},
  {TokenType::Texture1D_float, "Texture1D_float"},
  {TokenType::Texture1DArray, "Texture1DArray"},
  {TokenType::Texture2D, "Texture2D"},
  {TokenType::Texture2D_float, "Texture2D_float"},
  {TokenType::Texture2DArray, "Texture2DArray"},
  {TokenType::Texture2DMS, "Texture2DMS"},
  {TokenType::Texture2DMS_float, "Texture2DMS_float"},
  {TokenType::Texture2DMSArray, "Texture2DMSArray"},
  {TokenType::Texture3D, "Texture3D"},
  {TokenType::Texture3D_float, "Texture3D_float"},
  {TokenType::TextureCube, "TextureCube"},
  {TokenType::TextureCubeArray, "TextureCubeArray"},
  {TokenType::TextureCube_float, "TextureCube_float"},
  {TokenType::True, "True"},
  {TokenType::Typedef, "Typedef"},
  {TokenType::Triangle, "Triangle"},
  {TokenType::Triangleadj, "Triangleadj"},
  {TokenType::TriangleStream, "TriangleStream"},
  {TokenType::Uint, "Uint"},
  {TokenType::Uniform, "Uniform"},
  {TokenType::Unorm, "Unorm"},
  {TokenType::Unsigned, "Unsigned"},
  {TokenType::Vector, "Vector"},
  {TokenType::Vertexfragment, "Vertexfragment"},
  {TokenType::VertexShader, "VertexShader"},
  {TokenType::Void, "Void"},
  {TokenType::Volatile, "Volatile"},
  {TokenType::While, "While"},
  {TokenType::Expression, "Expression"},
  {TokenType::UserDefined, "UserDefined"},
  {TokenType::Float1, "Float1"},
  {TokenType::Float1x1, "Float1x1"},
  {TokenType::Float1x2, "Float1x2"},
  {TokenType::Float1x3, "Float1x3"},
  {TokenType::Float1x4, "Float1x4"},
  {TokenType::Float2, "Float2"},
  {TokenType::Float2x1, "Float2x1"},
  {TokenType::Float2x2, "Float2x2"},
  {TokenType::Float2x3, "Float2x3"},
  {TokenType::Float2x4, "Float2x4"},
  {TokenType::Float3, "Float3"},
  {TokenType::Float3x1, "Float3x1"},
  {TokenType::Float3x2, "Float3x2"},
  {TokenType::Float3x3, "Float3x3"},
  {TokenType::Float3x4, "Float3x4"},
  {TokenType::Float4, "Float4"},
  {TokenType::Float4x1, "Float4x1"},
  {TokenType::Float4x2, "Float4x2"},
  {TokenType::Float4x3, "Float4x3"},
  {TokenType::Float4x4, "Float4x4"},
  {TokenType::Half1, "Half1"},
  {TokenType::Half1x1, "Half1x1"},
  {TokenType::Half1x2, "Half1x2"},
  {TokenType::Half1x3, "Half1x3"},
  {TokenType::Half1x4, "Half1x4"},
  {TokenType::Half2, "Half2"},
  {TokenType::Half2x1, "Half2x1"},
  {TokenType::Half2x2, "Half2x2"},
  {TokenType::Half2x3, "Half2x3"},
  {TokenType::Half2x4, "Half2x4"},
  {TokenType::Half3, "Half3"},
  {TokenType::Half3x1, "Half3x1"},
  {TokenType::Half3x2, "Half3x2"},
  {TokenType::Half3x3, "Half3x3"},
  {TokenType::Half3x4, "Half3x4"},
  {TokenType::Half4, "Half4"},
  {TokenType::Half4x1, "Half4x1"},
  {TokenType::Half4x2, "Half4x2"},
  {TokenType::Half4x3, "Half4x3"},
  {TokenType::Half4x4, "Half4x4"},
  {TokenType::Int1, "Int1"},
  {TokenType::Int1x1, "Int1x1"},
  {TokenType::Int1x2, "Int1x2"},
  {TokenType::Int1x3, "Int1x3"},
  {TokenType::Int1x4, "Int1x4"},
  {TokenType::Int2, "Int2"},
  {TokenType::Int2x1, "Int2x1"},
  {TokenType::Int2x2, "Int2x2"},
  {TokenType::Int2x3, "Int2x3"},
  {TokenType::Int2x4, "Int2x4"},
  {TokenType::Int3, "Int3"},
  {TokenType::Int3x1, "Int3x1"},
  {TokenType::Int3x2, "Int3x2"},
  {TokenType::Int3x3, "Int3x3"},
  {TokenType::Int3x4, "Int3x4"},
  {TokenType::Int4, "Int4"},
  {TokenType::Int4x1, "Int4x1"},
  {TokenType::Int4x2, "Int4x2"},
  {TokenType::Int4x3, "Int4x3"},
  {TokenType::Int4x4, "Int4x4"},
  {TokenType::Uint1, "Uint1"},
  {TokenType::Uint1x1, "Uint1x1"},
  {TokenType::Uint1x2, "Uint1x2"},
  {TokenType::Uint1x3, "Uint1x3"},
  {TokenType::Uint1x4, "Uint1x4"},
  {TokenType::Uint2, "Uint2"},
  {TokenType::Uint2x1, "Uint2x1"},
  {TokenType::Uint2x2, "Uint2x2"},
  {TokenType::Uint2x3, "Uint2x3"},
  {TokenType::Uint2x4, "Uint2x4"},
  {TokenType::Uint3, "Uint3"},
  {TokenType::Uint3x1, "Uint3x1"},
  {TokenType::Uint3x2, "Uint3x2"},
  {TokenType::Uint3x3, "Uint3x3"},
  {TokenType::Uint3x4, "Uint3x4"},
  {TokenType::Uint4, "Uint4"},
  {TokenType::Uint4x1, "Uint4x1"},
  {TokenType::Uint4x2, "Uint4x2"},
  {TokenType::Uint4x3, "Uint4x3"},
  {TokenType::Uint4x4, "Uint4x4"},
  {TokenType::Bool1, "Bool1"},
  {TokenType::Bool1x1, "Bool1x1"},
  {TokenType::Bool1x2, "Bool1x2"},
  {TokenType::Bool1x3, "Bool1x3"},
  {TokenType::Bool1x4, "Bool1x4"},
  {TokenType::Bool2, "Bool2"},
  {TokenType::Bool2x1, "Bool2x1"},
  {TokenType::Bool2x2, "Bool2x2"},
  {TokenType::Bool2x3, "Bool2x3"},
  {TokenType::Bool2x4, "Bool2x4"},
  {TokenType::Bool3, "Bool3"},
  {TokenType::Bool3x1, "Bool3x1"},
  {TokenType::Bool3x2, "Bool3x2"},
  {TokenType::Bool3x3, "Bool3x3"},
  {TokenType::Bool3x4, "Bool3x4"},
  {TokenType::Bool4, "Bool4"},
  {TokenType::Bool4x1, "Bool4x1"},
  {TokenType::Bool4x2, "Bool4x2"},
  {TokenType::Bool4x3, "Bool4x3"},
  {TokenType::Bool4x4, "Bool4x4"},
  {TokenType::Min10float1, "Min10float1"},
  {TokenType::Min10float1x1, "Min10float1x1"},
  {TokenType::Min10float1x2, "Min10float1x2"},
  {TokenType::Min10float1x3, "Min10float1x3"},
  {TokenType::Min10float1x4, "Min10float1x4"},
  {TokenType::Min10float2, "Min10float2"},
  {TokenType::Min10float2x1, "Min10float2x1"},
  {TokenType::Min10float2x2, "Min10float2x2"},
  {TokenType::Min10float2x3, "Min10float2x3"},
  {TokenType::Min10float2x4, "Min10float2x4"},
  {TokenType::Min10float3, "Min10float3"},
  {TokenType::Min10float3x1, "Min10float3x1"},
  {TokenType::Min10float3x2, "Min10float3x2"},
  {TokenType::Min10float3x3, "Min10float3x3"},
  {TokenType::Min10float3x4, "Min10float3x4"},
  {TokenType::Min10float4, "Min10float4"},
  {TokenType::Min10float4x1, "Min10float4x1"},
  {TokenType::Min10float4x2, "Min10float4x2"},
  {TokenType::Min10float4x3, "Min10float4x3"},
  {TokenType::Min10float4x4, "Min10float4x4"},
  {TokenType::Min16float1, "Min16float1"},
  {TokenType::Min16float1x1, "Min16float1x1"},
  {TokenType::Min16float1x2, "Min16float1x2"},
  {TokenType::Min16float1x3, "Min16float1x3"},
  {TokenType::Min16float1x4, "Min16float1x4"},
  {TokenType::Min16float2, "Min16float2"},
  {TokenType::Min16float2x1, "Min16float2x1"},
  {TokenType::Min16float2x2, "Min16float2x2"},
  {TokenType::Min16float2x3, "Min16float2x3"},
  {TokenType::Min16float2x4, "Min16float2x4"},
  {TokenType::Min16float3, "Min16float3"},
  {TokenType::Min16float3x1, "Min16float3x1"},
  {TokenType::Min16float3x2, "Min16float3x2"},
  {TokenType::Min16float3x3, "Min16float3x3"},
  {TokenType::Min16float3x4, "Min16float3x4"},
  {TokenType::Min16float4, "Min16float4"},
  {TokenType::Min16float4x1, "Min16float4x1"},
  {TokenType::Min16float4x2, "Min16float4x2"},
  {TokenType::Min16float4x3, "Min16float4x3"},
  {TokenType::Min16float4x4, "Min16float4x4"},
  {TokenType::Min12int1, "Min12int1"},
  {TokenType::Min12int1x1, "Min12int1x1"},
  {TokenType::Min12int1x2, "Min12int1x2"},
  {TokenType::Min12int1x3, "Min12int1x3"},
  {TokenType::Min12int1x4, "Min12int1x4"},
  {TokenType::Min12int2, "Min12int2"},
  {TokenType::Min12int2x1, "Min12int2x1"},
  {TokenType::Min12int2x2, "Min12int2x2"},
  {TokenType::Min12int2x3, "Min12int2x3"},
  {TokenType::Min12int2x4, "Min12int2x4"},
  {TokenType::Min12int3, "Min12int3"},
  {TokenType::Min12int3x1, "Min12int3x1"},
  {TokenType::Min12int3x2, "Min12int3x2"},
  {TokenType::Min12int3x3, "Min12int3x3"},
  {TokenType::Min12int3x4, "Min12int3x4"},
  {TokenType::Min12int4, "Min12int4"},
  {TokenType::Min12int4x1, "Min12int4x1"},
  {TokenType::Min12int4x2, "Min12int4x2"},
  {TokenType::Min12int4x3, "Min12int4x3"},
  {TokenType::Min12int4x4, "Min12int4x4"},
  {TokenType::Min16int1, "Min16int1"},
  {TokenType::Min16int1x1, "Min16int1x1"},
  {TokenType::Min16int1x2, "Min16int1x2"},
  {TokenType::Min16int1x3, "Min16int1x3"},
  {TokenType::Min16int1x4, "Min16int1x4"},
  {TokenType::Min16int2, "Min16int2"},
  {TokenType::Min16int2x1, "Min16int2x1"},
  {TokenType::Min16int2x2, "Min16int2x2"},
  {TokenType::Min16int2x3, "Min16int2x3"},
  {TokenType::Min16int2x4, "Min16int2x4"},
  {TokenType::Min16int3, "Min16int3"},
  {TokenType::Min16int3x1, "Min16int3x1"},
  {TokenType::Min16int3x2, "Min16int3x2"},
  {TokenType::Min16int3x3, "Min16int3x3"},
  {TokenType::Min16int3x4, "Min16int3x4"},
  {TokenType::Min16int4, "Min16int4"},
  {TokenType::Min16int4x1, "Min16int4x1"},
  {TokenType::Min16int4x2, "Min16int4x2"},
  {TokenType::Min16int4x3, "Min16int4x3"},
  {TokenType::Min16int4x4, "Min16int4x4"},
  {TokenType::Min16uint1, "Min16uint1"},
  {TokenType::Min16uint1x1, "Min16uint1x1"},
  {TokenType::Min16uint1x2, "Min16uint1x2"},
  {TokenType::Min16uint1x3, "Min16uint1x3"},
  {TokenType::Min16uint1x4, "Min16uint1x4"},
  {TokenType::Min16uint2, "Min16uint2"},
  {TokenType::Min16uint2x1, "Min16uint2x1"},
  {TokenType::Min16uint2x2, "Min16uint2x2"},
  {TokenType::Min16uint2x3, "Min16uint2x3"},
  {TokenType::Min16uint2x4, "Min16uint2x4"},
  {TokenType::Min16uint3, "Min16uint3"},
  {TokenType::Min16uint3x1, "Min16uint3x1"},
  {TokenType::Min16uint3x2, "Min16uint3x2"},
  {TokenType::Min16uint3x3, "Min16uint3x3"},
  {TokenType::Min16uint3x4, "Min16uint3x4"},
  {TokenType::Min16uint4, "Min16uint4"},
  {TokenType::Min16uint4x1, "Min16uint4x1"},
  {TokenType::Min16uint4x2, "Min16uint4x2"},
  {TokenType::Min16uint4x3, "Min16uint4x3"},
  {TokenType::Min16uint4x4, "Min16uint4x4"},
}; // _tokenTypeToString

const std::string& tokenTypeToString(TokenType t) {
  auto ti = _tokenTypeToString.find(t);
  if (ti == _tokenTypeToString.end()) {
    static const std::string undefined{"Undefined"};
    return undefined;
  }
  return (*ti).second;
}

TokenType findTokenType(const std::string_view& lexeme) {
  size_t len = lexeme.length();
  size_t ci = 0;
  if (len == 1) {
    switch (lexeme[ci]) {
      case '(':
        return TokenType::LeftParen;
      case ')':
        return TokenType::RightParen;
      case '[':
        return TokenType::LeftBracket;
      case ']':
        return TokenType::RightBracket;
      case '{':
        return TokenType::LeftBrace;
      case '}':
        return TokenType::RightBrace;
      case '_':
        return TokenType::Underscore;
      case '.':
        return TokenType::Dot;
      case ',':
        return TokenType::Comma;
      case ':':
        return TokenType::Colon;
      case ';':
        return TokenType::Semicolon;
      case '+':
        return TokenType::Plus;
      case '-':
        return TokenType::Minus;
      case '*':
        return TokenType::Star;
      case '/':
        return TokenType::Slash;
      case '%':
        return TokenType::Percent;
      case '^':
        return TokenType::Caret;
      case '&':
        return TokenType::Ampersand;
      case '|':
        return TokenType::Pipe;
      case '~':
        return TokenType::Tilde;
      case '!':
        return TokenType::Bang;
      case '=':
        return TokenType::Equal;
      case '<':
        return TokenType::Less;
      case '>':
        return TokenType::Greater;
      case '?':
        return TokenType::Question;
      case '#':
        return TokenType::Hash;
    }
  }
  if (len == 2) {
    switch (lexeme[ci]) {
      case '+':
        ++ci;
        switch (lexeme[ci]) {
          case '=':
            return TokenType::PlusEqual;
          case '+':
            return TokenType::PlusPlus;
        }
      break;
      case '-':
        ++ci;
        switch (lexeme[ci]) {
          case '=':
            return TokenType::MinusEqual;
          case '-':
            return TokenType::MinusMinus;
        }
      break;
      case '*':
        ++ci;
        switch (lexeme[ci]) {
          case '=':
            return TokenType::StarEqual;
        }
      break;
      case '/':
        ++ci;
        switch (lexeme[ci]) {
          case '=':
            return TokenType::SlashEqual;
        }
      break;
      case '%':
        ++ci;
        switch (lexeme[ci]) {
          case '=':
            return TokenType::PercentEqual;
        }
      break;
      case '^':
        ++ci;
        switch (lexeme[ci]) {
          case '=':
            return TokenType::CaretEqual;
        }
      break;
      case '&':
        ++ci;
        switch (lexeme[ci]) {
          case '=':
            return TokenType::AmpersandEqual;
          case '&':
            return TokenType::AmpersandAmpersand;
        }
      break;
      case '|':
        ++ci;
        switch (lexeme[ci]) {
          case '=':
            return TokenType::PipeEqual;
          case '|':
            return TokenType::PipePipe;
        }
      break;
      case '<':
        ++ci;
        switch (lexeme[ci]) {
          case '<':
            return TokenType::LessLess;
          case '=':
            return TokenType::LessEqual;
        }
      break;
      case '>':
        ++ci;
        switch (lexeme[ci]) {
          case '>':
            return TokenType::GreaterGreater;
          case '=':
            return TokenType::GreaterEqual;
        }
      break;
      case '=':
        ++ci;
        switch (lexeme[ci]) {
          case '=':
            return TokenType::EqualEqual;
        }
      break;
      case '!':
        ++ci;
        switch (lexeme[ci]) {
          case '=':
            return TokenType::BangEqual;
        }
      break;
      case '?':
        ++ci;
        switch (lexeme[ci]) {
          case '?':
            return TokenType::QuestionQuestion;
        }
      break;
      case 'd':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            return TokenType::Do;
        }
      break;
      case 'i':
        ++ci;
        switch (lexeme[ci]) {
          case 'f':
            return TokenType::If;
          case 'n':
            return TokenType::In;
        }
      break;
    }
  }
  if (len == 3) {
    switch (lexeme[ci]) {
      case '<':
        ++ci;
        switch (lexeme[ci]) {
          case '<':
            ++ci;
            switch (lexeme[ci]) {
              case '=':
                return TokenType::LessLessEqual;
            }
          break;
        }
      break;
      case '>':
        ++ci;
        switch (lexeme[ci]) {
          case '>':
            ++ci;
            switch (lexeme[ci]) {
              case '=':
                return TokenType::GreaterGreaterEqual;
            }
          break;
        }
      break;
      case 'a':
        ++ci;
        switch (lexeme[ci]) {
          case 's':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                return TokenType::Asm;
            }
          break;
        }
      break;
      case 'f':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'r':
                return TokenType::For;
            }
          break;
        }
      break;
      case 'i':
        ++ci;
        switch (lexeme[ci]) {
          case 'n':
            ++ci;
            switch (lexeme[ci]) {
              case 't':
                return TokenType::Int;
            }
          break;
        }
      break;
      case 'o':
        ++ci;
        switch (lexeme[ci]) {
          case 'u':
            ++ci;
            switch (lexeme[ci]) {
              case 't':
                return TokenType::Out;
            }
          break;
        }
      break;
    }
  }
  if (len == 4) {
    switch (lexeme[ci]) {
      case 'b':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'l':
                    return TokenType::Bool;
                }
              break;
            }
          break;
        }
      break;
      case 'c':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 's':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    return TokenType::Case;
                }
              break;
            }
          break;
        }
      break;
      case 'e':
        ++ci;
        switch (lexeme[ci]) {
          case 'l':
            ++ci;
            switch (lexeme[ci]) {
              case 's':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    return TokenType::Else;
                }
              break;
            }
          break;
        }
      break;
      case 'h':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'l':
                ++ci;
                switch (lexeme[ci]) {
                  case 'f':
                    return TokenType::Half;
                }
              break;
            }
          break;
        }
      break;
      case 'l':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    return TokenType::Line;
                }
              break;
            }
          break;
        }
      break;
      case 'N':
        ++ci;
        switch (lexeme[ci]) {
          case 'U':
            ++ci;
            switch (lexeme[ci]) {
              case 'L':
                ++ci;
                switch (lexeme[ci]) {
                  case 'L':
                    return TokenType::Null;
                }
              break;
            }
          break;
        }
      break;
      case 'p':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 's':
                ++ci;
                switch (lexeme[ci]) {
                  case 's':
                    return TokenType::Pass;
                }
              break;
            }
          break;
        }
      break;
      case 't':
        ++ci;
        switch (lexeme[ci]) {
          case 'r':
            ++ci;
            switch (lexeme[ci]) {
              case 'u':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    return TokenType::True;
                }
              break;
            }
          break;
        }
      break;
      case 'u':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    return TokenType::Uint;
                }
              break;
            }
          break;
        }
      break;
      case 'v':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'i':
                ++ci;
                switch (lexeme[ci]) {
                  case 'd':
                    return TokenType::Void;
                }
              break;
            }
          break;
        }
      break;
      case 'i':
        ++ci;
        switch (lexeme[ci]) {
          case 'n':
            ++ci;
            switch (lexeme[ci]) {
              case 't':
                ++ci;
                switch (lexeme[ci]) {
                  case '1':
                    return TokenType::Int1;
                  case '2':
                    return TokenType::Int2;
                  case '3':
                    return TokenType::Int3;
                  case '4':
                    return TokenType::Int4;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 5) {
    switch (lexeme[ci]) {
      case 'b':
        ++ci;
        switch (lexeme[ci]) {
          case 'r':
            ++ci;
            switch (lexeme[ci]) {
              case 'e':
                ++ci;
                switch (lexeme[ci]) {
                  case 'a':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'k':
                        return TokenType::Break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'l':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '1':
                        return TokenType::Bool1;
                      case '2':
                        return TokenType::Bool2;
                      case '3':
                        return TokenType::Bool3;
                      case '4':
                        return TokenType::Bool4;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'c':
        ++ci;
        switch (lexeme[ci]) {
          case 'l':
            ++ci;
            switch (lexeme[ci]) {
              case 'a':
                ++ci;
                switch (lexeme[ci]) {
                  case 's':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 's':
                        return TokenType::Class;
                    }
                  break;
                }
              break;
            }
          break;
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 's':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        return TokenType::Const;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'd':
        ++ci;
        switch (lexeme[ci]) {
          case 'w':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'r':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'd':
                        return TokenType::Dword;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'f':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'l':
                ++ci;
                switch (lexeme[ci]) {
                  case 's':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        return TokenType::False;
                    }
                  break;
                }
              break;
            }
          break;
          case 'l':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'a':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        return TokenType::Float;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'i':
        ++ci;
        switch (lexeme[ci]) {
          case 'n':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'u':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        return TokenType::Inout;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'p':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'i':
                ++ci;
                switch (lexeme[ci]) {
                  case 'n':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        return TokenType::Point;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 's':
        ++ci;
        switch (lexeme[ci]) {
          case 'n':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'r':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'm':
                        return TokenType::Snorm;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'u':
        ++ci;
        switch (lexeme[ci]) {
          case 'n':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'r':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'm':
                        return TokenType::Unorm;
                    }
                  break;
                }
              break;
            }
          break;
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '1':
                        return TokenType::Uint1;
                      case '2':
                        return TokenType::Uint2;
                      case '3':
                        return TokenType::Uint3;
                      case '4':
                        return TokenType::Uint4;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'w':
        ++ci;
        switch (lexeme[ci]) {
          case 'h':
            ++ci;
            switch (lexeme[ci]) {
              case 'i':
                ++ci;
                switch (lexeme[ci]) {
                  case 'l':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        return TokenType::While;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'h':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'l':
                ++ci;
                switch (lexeme[ci]) {
                  case 'f':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '1':
                        return TokenType::Half1;
                      case '2':
                        return TokenType::Half2;
                      case '3':
                        return TokenType::Half3;
                      case '4':
                        return TokenType::Half4;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 6) {
    switch (lexeme[ci]) {
      case 'B':
        ++ci;
        switch (lexeme[ci]) {
          case 'u':
            ++ci;
            switch (lexeme[ci]) {
              case 'f':
                ++ci;
                switch (lexeme[ci]) {
                  case 'f':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            return TokenType::Buffer;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'd':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'u':
                ++ci;
                switch (lexeme[ci]) {
                  case 'b':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            return TokenType::Double;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'e':
        ++ci;
        switch (lexeme[ci]) {
          case 'x':
            ++ci;
            switch (lexeme[ci]) {
              case 'p':
                ++ci;
                switch (lexeme[ci]) {
                  case 'o':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'r':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 't':
                            return TokenType::Export;
                        }
                      break;
                    }
                  break;
                }
              break;
              case 't':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'r':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'n':
                            return TokenType::Extern;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'i':
        ++ci;
        switch (lexeme[ci]) {
          case 'n':
            ++ci;
            switch (lexeme[ci]) {
              case 'l':
                ++ci;
                switch (lexeme[ci]) {
                  case 'i':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'n':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            return TokenType::Inline;
                        }
                      break;
                    }
                  break;
                }
              break;
              case 't':
                ++ci;
                switch (lexeme[ci]) {
                  case '1':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'x':
                        ++ci;
                        switch (lexeme[ci]) {
                          case '1':
                            return TokenType::Int1x1;
                          case '2':
                            return TokenType::Int1x2;
                          case '3':
                            return TokenType::Int1x3;
                          case '4':
                            return TokenType::Int1x4;
                        }
                      break;
                    }
                  break;
                  case '2':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'x':
                        ++ci;
                        switch (lexeme[ci]) {
                          case '1':
                            return TokenType::Int2x1;
                          case '2':
                            return TokenType::Int2x2;
                          case '3':
                            return TokenType::Int2x3;
                          case '4':
                            return TokenType::Int2x4;
                        }
                      break;
                    }
                  break;
                  case '3':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'x':
                        ++ci;
                        switch (lexeme[ci]) {
                          case '1':
                            return TokenType::Int3x1;
                          case '2':
                            return TokenType::Int3x2;
                          case '3':
                            return TokenType::Int3x3;
                          case '4':
                            return TokenType::Int3x4;
                        }
                      break;
                    }
                  break;
                  case '4':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'x':
                        ++ci;
                        switch (lexeme[ci]) {
                          case '1':
                            return TokenType::Int4x1;
                          case '2':
                            return TokenType::Int4x2;
                          case '3':
                            return TokenType::Int4x3;
                          case '4':
                            return TokenType::Int4x4;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'l':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'a':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            return TokenType::Linear;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'm':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 't':
                ++ci;
                switch (lexeme[ci]) {
                  case 'r':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'i':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            return TokenType::Matrix;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'r':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 't':
                ++ci;
                switch (lexeme[ci]) {
                  case 'u':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'r':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'n':
                            return TokenType::Return;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 's':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            return TokenType::Sample;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'h':
            ++ci;
            switch (lexeme[ci]) {
              case 'a':
                ++ci;
                switch (lexeme[ci]) {
                  case 'r':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'd':
                            return TokenType::Shared;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 't':
            ++ci;
            switch (lexeme[ci]) {
              case 'a':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'i':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'c':
                            return TokenType::Static;
                        }
                      break;
                    }
                  break;
                }
              break;
              case 'r':
                ++ci;
                switch (lexeme[ci]) {
                  case 'i':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'n':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'g':
                            return TokenType::String;
                        }
                      break;
                    }
                  break;
                  case 'u':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'c':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 't':
                            return TokenType::Struct;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'w':
            ++ci;
            switch (lexeme[ci]) {
              case 'i':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'c':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'h':
                            return TokenType::Switch;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'v':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'c':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'o':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            return TokenType::Vector;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'f':
        ++ci;
        switch (lexeme[ci]) {
          case 'l':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'a':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        ++ci;
                        switch (lexeme[ci]) {
                          case '1':
                            return TokenType::Float1;
                          case '2':
                            return TokenType::Float2;
                          case '3':
                            return TokenType::Float3;
                          case '4':
                            return TokenType::Float4;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 7) {
    switch (lexeme[ci]) {
      case 'c':
        ++ci;
        switch (lexeme[ci]) {
          case 'b':
            ++ci;
            switch (lexeme[ci]) {
              case 'u':
                ++ci;
                switch (lexeme[ci]) {
                  case 'f':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'f':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                return TokenType::Cbuffer;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'i':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'l':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                return TokenType::Compile;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'd':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'f':
                ++ci;
                switch (lexeme[ci]) {
                  case 'a':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'l':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 't':
                                return TokenType::Default;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 's':
                ++ci;
                switch (lexeme[ci]) {
                  case 'c':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'a':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'd':
                                return TokenType::Discard;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'f':
        ++ci;
        switch (lexeme[ci]) {
          case 'x':
            ++ci;
            switch (lexeme[ci]) {
              case 'g':
                ++ci;
                switch (lexeme[ci]) {
                  case 'r':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'o':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'u':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'p':
                                return TokenType::Fxgroup;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'l':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'a':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'd':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'j':
                                return TokenType::Lineadj;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'p':
        ++ci;
        switch (lexeme[ci]) {
          case 'r':
            ++ci;
            switch (lexeme[ci]) {
              case 'e':
                ++ci;
                switch (lexeme[ci]) {
                  case 'c':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'i':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 's':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                return TokenType::Precise;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 's':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                return TokenType::Sampler;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 't':
        ++ci;
        switch (lexeme[ci]) {
          case 'b':
            ++ci;
            switch (lexeme[ci]) {
              case 'u':
                ++ci;
                switch (lexeme[ci]) {
                  case 'f':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'f':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                return TokenType::Tbuffer;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'x':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                return TokenType::Texture;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'y':
            ++ci;
            switch (lexeme[ci]) {
              case 'p':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'd':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'f':
                                return TokenType::Typedef;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'u':
        ++ci;
        switch (lexeme[ci]) {
          case 'n':
            ++ci;
            switch (lexeme[ci]) {
              case 'i':
                ++ci;
                switch (lexeme[ci]) {
                  case 'f':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'o':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'm':
                                return TokenType::Uniform;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '1':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Uint1x1;
                              case '2':
                                return TokenType::Uint1x2;
                              case '3':
                                return TokenType::Uint1x3;
                              case '4':
                                return TokenType::Uint1x4;
                            }
                          break;
                        }
                      break;
                      case '2':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Uint2x1;
                              case '2':
                                return TokenType::Uint2x2;
                              case '3':
                                return TokenType::Uint2x3;
                              case '4':
                                return TokenType::Uint2x4;
                            }
                          break;
                        }
                      break;
                      case '3':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Uint3x1;
                              case '2':
                                return TokenType::Uint3x2;
                              case '3':
                                return TokenType::Uint3x3;
                              case '4':
                                return TokenType::Uint3x4;
                            }
                          break;
                        }
                      break;
                      case '4':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Uint4x1;
                              case '2':
                                return TokenType::Uint4x2;
                              case '3':
                                return TokenType::Uint4x3;
                              case '4':
                                return TokenType::Uint4x4;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'h':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'l':
                ++ci;
                switch (lexeme[ci]) {
                  case 'f':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '1':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Half1x1;
                              case '2':
                                return TokenType::Half1x2;
                              case '3':
                                return TokenType::Half1x3;
                              case '4':
                                return TokenType::Half1x4;
                            }
                          break;
                        }
                      break;
                      case '2':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Half2x1;
                              case '2':
                                return TokenType::Half2x2;
                              case '3':
                                return TokenType::Half2x3;
                              case '4':
                                return TokenType::Half2x4;
                            }
                          break;
                        }
                      break;
                      case '3':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Half3x1;
                              case '2':
                                return TokenType::Half3x2;
                              case '3':
                                return TokenType::Half3x3;
                              case '4':
                                return TokenType::Half3x4;
                            }
                          break;
                        }
                      break;
                      case '4':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Half4x1;
                              case '2':
                                return TokenType::Half4x2;
                              case '3':
                                return TokenType::Half4x3;
                              case '4':
                                return TokenType::Half4x4;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'b':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'l':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '1':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Bool1x1;
                              case '2':
                                return TokenType::Bool1x2;
                              case '3':
                                return TokenType::Bool1x3;
                              case '4':
                                return TokenType::Bool1x4;
                            }
                          break;
                        }
                      break;
                      case '2':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Bool2x1;
                              case '2':
                                return TokenType::Bool2x2;
                              case '3':
                                return TokenType::Bool2x3;
                              case '4':
                                return TokenType::Bool2x4;
                            }
                          break;
                        }
                      break;
                      case '3':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Bool3x1;
                              case '2':
                                return TokenType::Bool3x2;
                              case '3':
                                return TokenType::Bool3x3;
                              case '4':
                                return TokenType::Bool3x4;
                            }
                          break;
                        }
                      break;
                      case '4':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '1':
                                return TokenType::Bool4x1;
                              case '2':
                                return TokenType::Bool4x2;
                              case '3':
                                return TokenType::Bool4x3;
                              case '4':
                                return TokenType::Bool4x4;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 8) {
    switch (lexeme[ci]) {
      case 'c':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'r':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'o':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'i':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'd':
                                    return TokenType::Centroid;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'i':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'n':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'u':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'e':
                                    return TokenType::Continue;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'm':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case '1':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '6':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'i':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'n':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 't':
                                    return TokenType::Min16int;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                      case '2':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'i':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'n':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 't':
                                    return TokenType::Min12int;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'r':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'g':
                ++ci;
                switch (lexeme[ci]) {
                  case 'i':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 's':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 't':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'r':
                                    return TokenType::Register;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'R':
        ++ci;
        switch (lexeme[ci]) {
          case 'W':
            ++ci;
            switch (lexeme[ci]) {
              case 'B':
                ++ci;
                switch (lexeme[ci]) {
                  case 'u':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'f':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'f':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'r':
                                    return TokenType::RWBuffer;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 't':
        ++ci;
        switch (lexeme[ci]) {
          case 'r':
            ++ci;
            switch (lexeme[ci]) {
              case 'i':
                ++ci;
                switch (lexeme[ci]) {
                  case 'a':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'n':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'g':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'e':
                                    return TokenType::Triangle;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'u':
        ++ci;
        switch (lexeme[ci]) {
          case 'n':
            ++ci;
            switch (lexeme[ci]) {
              case 's':
                ++ci;
                switch (lexeme[ci]) {
                  case 'i':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'g':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'n':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'd':
                                    return TokenType::Unsigned;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'v':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'l':
                ++ci;
                switch (lexeme[ci]) {
                  case 'a':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'i':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'e':
                                    return TokenType::Volatile;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'f':
        ++ci;
        switch (lexeme[ci]) {
          case 'l':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'a':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        ++ci;
                        switch (lexeme[ci]) {
                          case '1':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'x':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '1':
                                    return TokenType::Float1x1;
                                  case '2':
                                    return TokenType::Float1x2;
                                  case '3':
                                    return TokenType::Float1x3;
                                  case '4':
                                    return TokenType::Float1x4;
                                }
                              break;
                            }
                          break;
                          case '2':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'x':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '1':
                                    return TokenType::Float2x1;
                                  case '2':
                                    return TokenType::Float2x2;
                                  case '3':
                                    return TokenType::Float2x3;
                                  case '4':
                                    return TokenType::Float2x4;
                                }
                              break;
                            }
                          break;
                          case '3':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'x':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '1':
                                    return TokenType::Float3x1;
                                  case '2':
                                    return TokenType::Float3x2;
                                  case '3':
                                    return TokenType::Float3x3;
                                  case '4':
                                    return TokenType::Float3x4;
                                }
                              break;
                            }
                          break;
                          case '4':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'x':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '1':
                                    return TokenType::Float4x1;
                                  case '2':
                                    return TokenType::Float4x2;
                                  case '3':
                                    return TokenType::Float4x3;
                                  case '4':
                                    return TokenType::Float4x4;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 9) {
    switch (lexeme[ci]) {
      case 'i':
        ++ci;
        switch (lexeme[ci]) {
          case 'n':
            ++ci;
            switch (lexeme[ci]) {
              case 't':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'r':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'f':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'a':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'c':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        return TokenType::Interface;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'm':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case '1':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '6':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'u':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'i':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'n':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 't':
                                        return TokenType::Min16uint;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                          case 'i':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'n':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 't':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case '1':
                                        return TokenType::Min16int1;
                                      case '2':
                                        return TokenType::Min16int2;
                                      case '3':
                                        return TokenType::Min16int3;
                                      case '4':
                                        return TokenType::Min16int4;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                      case '2':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'i':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'n':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 't':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case '1':
                                        return TokenType::Min12int1;
                                      case '2':
                                        return TokenType::Min12int2;
                                      case '3':
                                        return TokenType::Min12int3;
                                      case '4':
                                        return TokenType::Min12int4;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'n':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 's':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'p':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'a':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'c':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        return TokenType::Namespace;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'r':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'w':
                ++ci;
                switch (lexeme[ci]) {
                  case '_':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'm':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'a':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'j':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'o':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'r':
                                        return TokenType::Row_major;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 's':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '2':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        return TokenType::Sampler2D;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 't':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'c':
                ++ci;
                switch (lexeme[ci]) {
                  case 'h':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'n':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'i':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'q':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'u':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        return TokenType::Technique;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'T':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'x':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '1':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        return TokenType::Texture1D;
                                    }
                                  break;
                                  case '2':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        return TokenType::Texture2D;
                                    }
                                  break;
                                  case '3':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        return TokenType::Texture3D;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 10) {
    switch (lexeme[ci]) {
      case 'B':
        ++ci;
        switch (lexeme[ci]) {
          case 'l':
            ++ci;
            switch (lexeme[ci]) {
              case 'e':
                ++ci;
                switch (lexeme[ci]) {
                  case 'n':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'd':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'S':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 't':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'a':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 't':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'e':
                                            return TokenType::BlendState;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'H':
        ++ci;
        switch (lexeme[ci]) {
          case 'u':
            ++ci;
            switch (lexeme[ci]) {
              case 'l':
                ++ci;
                switch (lexeme[ci]) {
                  case 'l':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 's':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'h':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'a':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'd':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'r':
                                            return TokenType::Hullshader;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'I':
        ++ci;
        switch (lexeme[ci]) {
          case 'n':
            ++ci;
            switch (lexeme[ci]) {
              case 'p':
                ++ci;
                switch (lexeme[ci]) {
                  case 'u':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'P':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'a':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 't':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'c':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'h':
                                            return TokenType::InputPatch;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'L':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'S':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 't':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'e':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'm':
                                            return TokenType::LineStream;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'm':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case '1':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '6':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'f':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'o':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 't':
                                            return TokenType::Min16float;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                          case 'u':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'i':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'n':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 't':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case '1':
                                            return TokenType::Min16uint1;
                                          case '2':
                                            return TokenType::Min16uint2;
                                          case '3':
                                            return TokenType::Min16uint3;
                                          case '4':
                                            return TokenType::Min16uint4;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                      case '0':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'f':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'o':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 't':
                                            return TokenType::Min10float;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'p':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'c':
                ++ci;
                switch (lexeme[ci]) {
                  case 'k':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'o':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'f':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'f':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 's':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 't':
                                            return TokenType::Packoffset;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 's':
        ++ci;
        switch (lexeme[ci]) {
          case 't':
            ++ci;
            switch (lexeme[ci]) {
              case 'a':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'b':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'o':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'c':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'k':
                                            return TokenType::Stateblock;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'E':
        ++ci;
        switch (lexeme[ci]) {
          case 'x':
            ++ci;
            switch (lexeme[ci]) {
              case 'p':
                ++ci;
                switch (lexeme[ci]) {
                  case 'r':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 's':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 's':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'i':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'o':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'n':
                                            return TokenType::Expression;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 11) {
    switch (lexeme[ci]) {
      case 'g':
        ++ci;
        switch (lexeme[ci]) {
          case 'r':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'u':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'p':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 's':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'h':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'a':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'r':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'e':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'd':
                                                return TokenType::Groupshared;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'O':
        ++ci;
        switch (lexeme[ci]) {
          case 'u':
            ++ci;
            switch (lexeme[ci]) {
              case 't':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 't':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'P':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'a':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 't':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'c':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'h':
                                                return TokenType::OutputPatch;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'P':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'x':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'S':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'h':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'a':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'd':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'e':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'r':
                                                return TokenType::PixelShader;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'i':
                ++ci;
                switch (lexeme[ci]) {
                  case 'n':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'S':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 't':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'r':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'a':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'm':
                                                return TokenType::PointStream;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'R':
        ++ci;
        switch (lexeme[ci]) {
          case 'W':
            ++ci;
            switch (lexeme[ci]) {
              case 'T':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'x':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 't':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'u':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'r':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case '1':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'D':
                                                return TokenType::RWTexture1D;
                                            }
                                          break;
                                          case '2':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'D':
                                                return TokenType::RWTexture2D;
                                            }
                                          break;
                                          case '3':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'D':
                                                return TokenType::RWTexture3D;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 's':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'C':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'U':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'B':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'E':
                                                return TokenType::SamplerCUBE;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 't':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'c':
                ++ci;
                switch (lexeme[ci]) {
                  case 'h':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'n':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'i':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'q':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'u':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case '1':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '0':
                                                return TokenType::Technique10;
                                              case '1':
                                                return TokenType::Technique11;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'r':
            ++ci;
            switch (lexeme[ci]) {
              case 'i':
                ++ci;
                switch (lexeme[ci]) {
                  case 'a':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'n':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'g':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'e':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'd':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'j':
                                                return TokenType::Triangleadj;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'T':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'x':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '2':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'M':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'S':
                                                return TokenType::Texture2DMS;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                  case 'C':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'u':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'b':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'e':
                                                return TokenType::TextureCube;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'U':
        ++ci;
        switch (lexeme[ci]) {
          case 's':
            ++ci;
            switch (lexeme[ci]) {
              case 'e':
                ++ci;
                switch (lexeme[ci]) {
                  case 'r':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'D':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'f':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'i':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'n':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'e':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'd':
                                                return TokenType::UserDefined;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'm':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case '1':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '0':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'f':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'o':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 't':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                return TokenType::Min10float1;
                                              case '2':
                                                return TokenType::Min10float2;
                                              case '3':
                                                return TokenType::Min10float3;
                                              case '4':
                                                return TokenType::Min10float4;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                      case '6':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'f':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'o':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 't':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                return TokenType::Min16float1;
                                              case '2':
                                                return TokenType::Min16float2;
                                              case '3':
                                                return TokenType::Min16float3;
                                              case '4':
                                                return TokenType::Min16float4;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                          case 'i':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'n':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 't':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case '1':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'x':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                return TokenType::Min16int1x1;
                                              case '2':
                                                return TokenType::Min16int1x2;
                                              case '3':
                                                return TokenType::Min16int1x3;
                                              case '4':
                                                return TokenType::Min16int1x4;
                                            }
                                          break;
                                        }
                                      break;
                                      case '2':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'x':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                return TokenType::Min16int2x1;
                                              case '2':
                                                return TokenType::Min16int2x2;
                                              case '3':
                                                return TokenType::Min16int2x3;
                                              case '4':
                                                return TokenType::Min16int2x4;
                                            }
                                          break;
                                        }
                                      break;
                                      case '3':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'x':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                return TokenType::Min16int3x1;
                                              case '2':
                                                return TokenType::Min16int3x2;
                                              case '3':
                                                return TokenType::Min16int3x3;
                                              case '4':
                                                return TokenType::Min16int3x4;
                                            }
                                          break;
                                        }
                                      break;
                                      case '4':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'x':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                return TokenType::Min16int4x1;
                                              case '2':
                                                return TokenType::Min16int4x2;
                                              case '3':
                                                return TokenType::Min16int4x3;
                                              case '4':
                                                return TokenType::Min16int4x4;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                      case '2':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'i':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'n':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 't':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case '1':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'x':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                return TokenType::Min12int1x1;
                                              case '2':
                                                return TokenType::Min12int1x2;
                                              case '3':
                                                return TokenType::Min12int1x3;
                                              case '4':
                                                return TokenType::Min12int1x4;
                                            }
                                          break;
                                        }
                                      break;
                                      case '2':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'x':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                return TokenType::Min12int2x1;
                                              case '2':
                                                return TokenType::Min12int2x2;
                                              case '3':
                                                return TokenType::Min12int2x3;
                                              case '4':
                                                return TokenType::Min12int2x4;
                                            }
                                          break;
                                        }
                                      break;
                                      case '3':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'x':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                return TokenType::Min12int3x1;
                                              case '2':
                                                return TokenType::Min12int3x2;
                                              case '3':
                                                return TokenType::Min12int3x3;
                                              case '4':
                                                return TokenType::Min12int3x4;
                                            }
                                          break;
                                        }
                                      break;
                                      case '4':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'x':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                return TokenType::Min12int4x1;
                                              case '2':
                                                return TokenType::Min12int4x2;
                                              case '3':
                                                return TokenType::Min12int4x3;
                                              case '4':
                                                return TokenType::Min12int4x4;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 12) {
    switch (lexeme[ci]) {
      case 'a':
        ++ci;
        switch (lexeme[ci]) {
          case 's':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case '_':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'f':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'a':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'g':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'm':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'e':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'n':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 't':
                                                    return TokenType::Asm_fragment;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'c':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'l':
                ++ci;
                switch (lexeme[ci]) {
                  case 'u':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'm':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'n':
                            ++ci;
                            switch (lexeme[ci]) {
                              case '_':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'm':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'j':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'o':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'r':
                                                    return TokenType::Column_major;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'D':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'a':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'i':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'n':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'S':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'h':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'd':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'e':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'r':
                                                    return TokenType::DomainShader;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'S':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'S':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 't':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'a':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 't':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'e':
                                                    return TokenType::SamplerState;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'V':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'r':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'S':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'h':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'd':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'e':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'r':
                                                    return TokenType::VertexShader;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'm':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case '1':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '6':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'u':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'i':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'n':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 't':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case '1':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'x':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case '1':
                                                    return TokenType::Min16uint1x1;
                                                  case '2':
                                                    return TokenType::Min16uint1x2;
                                                  case '3':
                                                    return TokenType::Min16uint1x3;
                                                  case '4':
                                                    return TokenType::Min16uint1x4;
                                                }
                                              break;
                                            }
                                          break;
                                          case '2':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'x':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case '1':
                                                    return TokenType::Min16uint2x1;
                                                  case '2':
                                                    return TokenType::Min16uint2x2;
                                                  case '3':
                                                    return TokenType::Min16uint2x3;
                                                  case '4':
                                                    return TokenType::Min16uint2x4;
                                                }
                                              break;
                                            }
                                          break;
                                          case '3':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'x':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case '1':
                                                    return TokenType::Min16uint3x1;
                                                  case '2':
                                                    return TokenType::Min16uint3x2;
                                                  case '3':
                                                    return TokenType::Min16uint3x3;
                                                  case '4':
                                                    return TokenType::Min16uint3x4;
                                                }
                                              break;
                                            }
                                          break;
                                          case '4':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'x':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case '1':
                                                    return TokenType::Min16uint4x1;
                                                  case '2':
                                                    return TokenType::Min16uint4x2;
                                                  case '3':
                                                    return TokenType::Min16uint4x3;
                                                  case '4':
                                                    return TokenType::Min16uint4x4;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 13) {
    switch (lexeme[ci]) {
      case 'C':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'i':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'l':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'S':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'h':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'a':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'd':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'e':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'r':
                                                        return TokenType::CompileShader;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 't':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'S':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'h':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'a':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'd':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'e':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'r':
                                                        return TokenType::ComputeShader;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'n':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'p':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'r':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 's':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'p':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'e':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'c':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 't':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'i':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'v':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'e':
                                                        return TokenType::Noperspective;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'p':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'x':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'f':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'a':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'g':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'm':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'e':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'n':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 't':
                                                        return TokenType::Pixelfragment;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'm':
        ++ci;
        switch (lexeme[ci]) {
          case 'i':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case '1':
                    ++ci;
                    switch (lexeme[ci]) {
                      case '0':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'f':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'o':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 't':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'x':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case '1':
                                                        return TokenType::Min10float1x1;
                                                      case '2':
                                                        return TokenType::Min10float1x2;
                                                      case '3':
                                                        return TokenType::Min10float1x3;
                                                      case '4':
                                                        return TokenType::Min10float1x4;
                                                    }
                                                  break;
                                                }
                                              break;
                                              case '2':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'x':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case '1':
                                                        return TokenType::Min10float2x1;
                                                      case '2':
                                                        return TokenType::Min10float2x2;
                                                      case '3':
                                                        return TokenType::Min10float2x3;
                                                      case '4':
                                                        return TokenType::Min10float2x4;
                                                    }
                                                  break;
                                                }
                                              break;
                                              case '3':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'x':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case '1':
                                                        return TokenType::Min10float3x1;
                                                      case '2':
                                                        return TokenType::Min10float3x2;
                                                      case '3':
                                                        return TokenType::Min10float3x3;
                                                      case '4':
                                                        return TokenType::Min10float3x4;
                                                    }
                                                  break;
                                                }
                                              break;
                                              case '4':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'x':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case '1':
                                                        return TokenType::Min10float4x1;
                                                      case '2':
                                                        return TokenType::Min10float4x2;
                                                      case '3':
                                                        return TokenType::Min10float4x3;
                                                      case '4':
                                                        return TokenType::Min10float4x4;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                      case '6':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'f':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'o':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 't':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '1':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'x':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case '1':
                                                        return TokenType::Min16float1x1;
                                                      case '2':
                                                        return TokenType::Min16float1x2;
                                                      case '3':
                                                        return TokenType::Min16float1x3;
                                                      case '4':
                                                        return TokenType::Min16float1x4;
                                                    }
                                                  break;
                                                }
                                              break;
                                              case '2':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'x':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case '1':
                                                        return TokenType::Min16float2x1;
                                                      case '2':
                                                        return TokenType::Min16float2x2;
                                                      case '3':
                                                        return TokenType::Min16float2x3;
                                                      case '4':
                                                        return TokenType::Min16float2x4;
                                                    }
                                                  break;
                                                }
                                              break;
                                              case '3':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'x':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case '1':
                                                        return TokenType::Min16float3x1;
                                                      case '2':
                                                        return TokenType::Min16float3x2;
                                                      case '3':
                                                        return TokenType::Min16float3x3;
                                                      case '4':
                                                        return TokenType::Min16float3x4;
                                                    }
                                                  break;
                                                }
                                              break;
                                              case '4':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'x':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case '1':
                                                        return TokenType::Min16float4x1;
                                                      case '2':
                                                        return TokenType::Min16float4x2;
                                                      case '3':
                                                        return TokenType::Min16float4x3;
                                                      case '4':
                                                        return TokenType::Min16float4x4;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 14) {
    switch (lexeme[ci]) {
      case 'G':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'o':
                ++ci;
                switch (lexeme[ci]) {
                  case 'm':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 't':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'y':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'S':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'h':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'a':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'd':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'e':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'r':
                                                            return TokenType::GeometryShader;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'T':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'x':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '1':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'A':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'r':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'r':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'a':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'y':
                                                            return TokenType::Texture1DArray;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                  case '2':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'A':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'r':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'r':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'a':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'y':
                                                            return TokenType::Texture2DArray;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'r':
            ++ci;
            switch (lexeme[ci]) {
              case 'i':
                ++ci;
                switch (lexeme[ci]) {
                  case 'a':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'n':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'g':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'e':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'S':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 't':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'r':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'e':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'a':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'm':
                                                            return TokenType::TriangleStream;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'v':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'r':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'x':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'f':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'r':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'a':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'g':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'm':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'e':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'n':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 't':
                                                            return TokenType::Vertexfragment;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 15) {
    switch (lexeme[ci]) {
      case 'n':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'i':
                ++ci;
                switch (lexeme[ci]) {
                  case 'n':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'p':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'o':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'l':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'a':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 't':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'i':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'o':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'n':
                                                                return TokenType::Nointerpolation;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'R':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 's':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'i':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'z':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'r':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'S':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 't':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'a':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 't':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'e':
                                                                return TokenType::RasterizerState;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 's':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '2':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case '_':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'f':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'l':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'o':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'a':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 't':
                                                                return TokenType::Sampler2D_float;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'T':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'x':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '1':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case '_':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'f':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'l':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'o':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'a':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 't':
                                                                return TokenType::Texture1D_float;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                  case '2':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case '_':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'f':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'l':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'o':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'a':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 't':
                                                                return TokenType::Texture2D_float;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                  case '3':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case '_':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'f':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'l':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'o':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'a':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 't':
                                                                return TokenType::Texture3D_float;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 16) {
    switch (lexeme[ci]) {
      case 'c':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'i':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'l':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '_':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'f':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'r':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'a':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'g':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'm':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'e':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'n':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 't':
                                                                    return TokenType::Compile_fragment;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'D':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'p':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'h':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'S':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 't':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'e':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'n':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'c':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'i':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'l':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'V':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'i':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'e':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'w':
                                                                    return TokenType::DepthStencilView;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'R':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 'd':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'T':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'a':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'r':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'g':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'e':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 't':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'V':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'i':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'e':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'w':
                                                                    return TokenType::RenderTargetView;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
          case 'W':
            ++ci;
            switch (lexeme[ci]) {
              case 'T':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'x':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 't':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'u':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'r':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case '1':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'D':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'A':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'r':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'r':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'a':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'y':
                                                                    return TokenType::RWTexture1DArray;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                          case '2':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'D':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'A':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'r':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'r':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'a':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'y':
                                                                    return TokenType::RWTexture2DArray;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 's':
        ++ci;
        switch (lexeme[ci]) {
          case 't':
            ++ci;
            switch (lexeme[ci]) {
              case 'a':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'e':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'b':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'l':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'o':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'c':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'k':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case '_':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 's':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 't':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'a':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 't':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'e':
                                                                    return TokenType::Stateblock_state;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'S':
        ++ci;
        switch (lexeme[ci]) {
          case 't':
            ++ci;
            switch (lexeme[ci]) {
              case 'r':
                ++ci;
                switch (lexeme[ci]) {
                  case 'u':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'c':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 't':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'u':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'r':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'd':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'B':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'u':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'f':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'f':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'e':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'r':
                                                                    return TokenType::StructuredBuffer;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'T':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'x':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '2':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'M':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'S':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'A':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'r':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'r':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'a':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'y':
                                                                    return TokenType::Texture2DMSArray;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                  case 'C':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'u':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'b':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'e':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'A':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'r':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'r':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'a':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'y':
                                                                    return TokenType::TextureCubeArray;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 17) {
    switch (lexeme[ci]) {
      case 'B':
        ++ci;
        switch (lexeme[ci]) {
          case 'y':
            ++ci;
            switch (lexeme[ci]) {
              case 't':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'A':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'd':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'd':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'r':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'e':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 's':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 's':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'B':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'u':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'f':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'f':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'e':
                                                                    ++ci;
                                                                    switch (lexeme[ci]) {
                                                                      case 'r':
                                                                        return TokenType::ByteAddressBuffer;
                                                                    }
                                                                  break;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'D':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'p':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'h':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'S':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 't':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'e':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'n':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'c':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'i':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'l':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'S':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 't':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'a':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 't':
                                                                    ++ci;
                                                                    switch (lexeme[ci]) {
                                                                      case 'e':
                                                                        return TokenType::DepthStencilState;
                                                                    }
                                                                  break;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 's':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'C':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'U':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'B':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'E':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case '_':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'f':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'l':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'o':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'a':
                                                                    ++ci;
                                                                    switch (lexeme[ci]) {
                                                                      case 't':
                                                                        return TokenType::SamplerCUBE_float;
                                                                    }
                                                                  break;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'T':
        ++ci;
        switch (lexeme[ci]) {
          case 'e':
            ++ci;
            switch (lexeme[ci]) {
              case 'x':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'r':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case '2':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'D':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'M':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'S':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case '_':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'f':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'l':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'o':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'a':
                                                                    ++ci;
                                                                    switch (lexeme[ci]) {
                                                                      case 't':
                                                                        return TokenType::Texture2DMS_float;
                                                                    }
                                                                  break;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                  case 'C':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'u':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'b':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'e':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case '_':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'f':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'l':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'o':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'a':
                                                                    ++ci;
                                                                    switch (lexeme[ci]) {
                                                                      case 't':
                                                                        return TokenType::TextureCube_float;
                                                                    }
                                                                  break;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 18) {
    switch (lexeme[ci]) {
      case 'R':
        ++ci;
        switch (lexeme[ci]) {
          case 'W':
            ++ci;
            switch (lexeme[ci]) {
              case 'S':
                ++ci;
                switch (lexeme[ci]) {
                  case 't':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'r':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'u':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'c':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 't':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'u':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'r':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'e':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'd':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'B':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'u':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'f':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'f':
                                                                    ++ci;
                                                                    switch (lexeme[ci]) {
                                                                      case 'e':
                                                                        ++ci;
                                                                        switch (lexeme[ci]) {
                                                                          case 'r':
                                                                            return TokenType::RWStructuredBuffer;
                                                                        }
                                                                      break;
                                                                    }
                                                                  break;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 19) {
    switch (lexeme[ci]) {
      case 'R':
        ++ci;
        switch (lexeme[ci]) {
          case 'W':
            ++ci;
            switch (lexeme[ci]) {
              case 'B':
                ++ci;
                switch (lexeme[ci]) {
                  case 'y':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 't':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'A':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'd':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'd':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'r':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'e':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 's':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 's':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'B':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'u':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'f':
                                                                    ++ci;
                                                                    switch (lexeme[ci]) {
                                                                      case 'f':
                                                                        ++ci;
                                                                        switch (lexeme[ci]) {
                                                                          case 'e':
                                                                            ++ci;
                                                                            switch (lexeme[ci]) {
                                                                              case 'r':
                                                                                return TokenType::RWByteAddressBuffer;
                                                                            }
                                                                          break;
                                                                        }
                                                                      break;
                                                                    }
                                                                  break;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 22) {
    switch (lexeme[ci]) {
      case 'A':
        ++ci;
        switch (lexeme[ci]) {
          case 'p':
            ++ci;
            switch (lexeme[ci]) {
              case 'p':
                ++ci;
                switch (lexeme[ci]) {
                  case 'e':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'n':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'd':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'S':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 't':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'r':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'u':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'c':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 't':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'u':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'r':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'e':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'd':
                                                                    ++ci;
                                                                    switch (lexeme[ci]) {
                                                                      case 'B':
                                                                        ++ci;
                                                                        switch (lexeme[ci]) {
                                                                          case 'u':
                                                                            ++ci;
                                                                            switch (lexeme[ci]) {
                                                                              case 'f':
                                                                                ++ci;
                                                                                switch (lexeme[ci]) {
                                                                                  case 'f':
                                                                                    ++ci;
                                                                                    switch (lexeme[ci]) {
                                                                                      case 'e':
                                                                                        ++ci;
                                                                                        switch (lexeme[ci]) {
                                                                                          case 'r':
                                                                                            return TokenType::AppendStructuredBuffer;
                                                                                        }
                                                                                      break;
                                                                                    }
                                                                                  break;
                                                                                }
                                                                              break;
                                                                            }
                                                                          break;
                                                                        }
                                                                      break;
                                                                    }
                                                                  break;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
      case 'S':
        ++ci;
        switch (lexeme[ci]) {
          case 'a':
            ++ci;
            switch (lexeme[ci]) {
              case 'm':
                ++ci;
                switch (lexeme[ci]) {
                  case 'p':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'l':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'e':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'r':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'C':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 'o':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'm':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'p':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'a':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 'r':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'i':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 's':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'o':
                                                                    ++ci;
                                                                    switch (lexeme[ci]) {
                                                                      case 'n':
                                                                        ++ci;
                                                                        switch (lexeme[ci]) {
                                                                          case 'S':
                                                                            ++ci;
                                                                            switch (lexeme[ci]) {
                                                                              case 't':
                                                                                ++ci;
                                                                                switch (lexeme[ci]) {
                                                                                  case 'a':
                                                                                    ++ci;
                                                                                    switch (lexeme[ci]) {
                                                                                      case 't':
                                                                                        ++ci;
                                                                                        switch (lexeme[ci]) {
                                                                                          case 'e':
                                                                                            return TokenType::SamplerComparisonState;
                                                                                        }
                                                                                      break;
                                                                                    }
                                                                                  break;
                                                                                }
                                                                              break;
                                                                            }
                                                                          break;
                                                                        }
                                                                      break;
                                                                    }
                                                                  break;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }
  if (len == 23) {
    switch (lexeme[ci]) {
      case 'C':
        ++ci;
        switch (lexeme[ci]) {
          case 'o':
            ++ci;
            switch (lexeme[ci]) {
              case 'n':
                ++ci;
                switch (lexeme[ci]) {
                  case 's':
                    ++ci;
                    switch (lexeme[ci]) {
                      case 'u':
                        ++ci;
                        switch (lexeme[ci]) {
                          case 'm':
                            ++ci;
                            switch (lexeme[ci]) {
                              case 'e':
                                ++ci;
                                switch (lexeme[ci]) {
                                  case 'S':
                                    ++ci;
                                    switch (lexeme[ci]) {
                                      case 't':
                                        ++ci;
                                        switch (lexeme[ci]) {
                                          case 'r':
                                            ++ci;
                                            switch (lexeme[ci]) {
                                              case 'u':
                                                ++ci;
                                                switch (lexeme[ci]) {
                                                  case 'c':
                                                    ++ci;
                                                    switch (lexeme[ci]) {
                                                      case 't':
                                                        ++ci;
                                                        switch (lexeme[ci]) {
                                                          case 'u':
                                                            ++ci;
                                                            switch (lexeme[ci]) {
                                                              case 'r':
                                                                ++ci;
                                                                switch (lexeme[ci]) {
                                                                  case 'e':
                                                                    ++ci;
                                                                    switch (lexeme[ci]) {
                                                                      case 'd':
                                                                        ++ci;
                                                                        switch (lexeme[ci]) {
                                                                          case 'B':
                                                                            ++ci;
                                                                            switch (lexeme[ci]) {
                                                                              case 'u':
                                                                                ++ci;
                                                                                switch (lexeme[ci]) {
                                                                                  case 'f':
                                                                                    ++ci;
                                                                                    switch (lexeme[ci]) {
                                                                                      case 'f':
                                                                                        ++ci;
                                                                                        switch (lexeme[ci]) {
                                                                                          case 'e':
                                                                                            ++ci;
                                                                                            switch (lexeme[ci]) {
                                                                                              case 'r':
                                                                                                return TokenType::ConsumeStructuredBuffer;
                                                                                            }
                                                                                          break;
                                                                                        }
                                                                                      break;
                                                                                    }
                                                                                  break;
                                                                                }
                                                                              break;
                                                                            }
                                                                          break;
                                                                        }
                                                                      break;
                                                                    }
                                                                  break;
                                                                }
                                                              break;
                                                            }
                                                          break;
                                                        }
                                                      break;
                                                    }
                                                  break;
                                                }
                                              break;
                                            }
                                          break;
                                        }
                                      break;
                                    }
                                  break;
                                }
                              break;
                            }
                          break;
                        }
                      break;
                    }
                  break;
                }
              break;
            }
          break;
        }
      break;
    }
  }

  return matchLiteral(lexeme);
}

} // namespace hlsl
